{"version":3,"sources":["../../../src/config/position.ts"],"names":["createParser","system","t","config","position","pos","prop","zIndex","property","scale","inset","spaceT","insetX","insetInline","insetY","insetBlock","top","insetBlockStart","bottom","insetBlockEnd","left","insetInlineStart","right","insetInlineEnd","insetStart","insetEnd","positionParser"],"mappings":"AAAA,SAAiBA,YAAjB,EAA+BC,MAA/B,QAA6C,qBAA7C;AAEA,SAAiBC,CAAjB,QAA2C,UAA3C;AAEA,IAAMC,MAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,IADW;AAErBC,EAAAA,GAAG,EAAEH,CAAC,CAACI,IAAF,CAAO,UAAP,CAFgB;AAGrBC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE,QAAZ;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAHa;AAIrBC,EAAAA,KAAK,EAAER,CAAC,CAACS,MAAF,CAAS,OAAT,CAJc;AAKrBC,EAAAA,MAAM,EAAEV,CAAC,CAACS,MAAF,CAAS,CAAC,MAAD,EAAS,OAAT,CAAT,CALa;AAMrBE,EAAAA,WAAW,EAAEX,CAAC,CAACS,MAAF,CAAS,aAAT,CANQ;AAOrBG,EAAAA,MAAM,EAAEZ,CAAC,CAACS,MAAF,CAAS,CAAC,KAAD,EAAQ,QAAR,CAAT,CAPa;AAQrBI,EAAAA,UAAU,EAAEb,CAAC,CAACS,MAAF,CAAS,YAAT,CARS;AASrBK,EAAAA,GAAG,EAAEd,CAAC,CAACS,MAAF,CAAS,KAAT,CATgB;AAUrBM,EAAAA,eAAe,EAAEf,CAAC,CAACS,MAAF,CAAS,iBAAT,CAVI;AAWrBO,EAAAA,MAAM,EAAEhB,CAAC,CAACS,MAAF,CAAS,QAAT,CAXa;AAYrBQ,EAAAA,aAAa,EAAEjB,CAAC,CAACS,MAAF,CAAS,eAAT,CAZM;AAarBS,EAAAA,IAAI,EAAElB,CAAC,CAACS,MAAF,CAAS,MAAT,CAbe;AAcrBU,EAAAA,gBAAgB,EAAEnB,CAAC,CAACS,MAAF,CAAS,kBAAT,CAdG;AAerBW,EAAAA,KAAK,EAAEpB,CAAC,CAACS,MAAF,CAAS,OAAT,CAfc;AAgBrBY,EAAAA,cAAc,EAAErB,CAAC,CAACS,MAAF,CAAS,gBAAT;AAhBK,CAAvB;AAmBAR,MAAM,CAACqB,UAAP,GAAoBrB,MAAM,CAACkB,gBAA3B;AACAlB,MAAM,CAACsB,QAAP,GAAkBtB,MAAM,CAACoB,cAAzB;AAEA;AACA;AACA;;AAgEA,OAAO,IAAMnB,QAAQ,GAAGH,MAAM,CAACE,MAAD,CAAvB;AACP,OAAO,IAAMuB,cAAc,GAAG1B,YAAY,CAACG,MAAD,CAAnC","sourcesContent":["import { Config, createParser, system } from \"@styled-system/core\"\nimport * as CSS from \"csstype\"\nimport { Length, t, ResponsiveValue } from \"../utils\"\n\nconst config: Config = {\n  position: true,\n  pos: t.prop(\"position\"),\n  zIndex: { property: \"zIndex\", scale: \"zIndices\" },\n  inset: t.spaceT(\"inset\"),\n  insetX: t.spaceT([\"left\", \"right\"]),\n  insetInline: t.spaceT(\"insetInline\"),\n  insetY: t.spaceT([\"top\", \"bottom\"]),\n  insetBlock: t.spaceT(\"insetBlock\"),\n  top: t.spaceT(\"top\"),\n  insetBlockStart: t.spaceT(\"insetBlockStart\"),\n  bottom: t.spaceT(\"bottom\"),\n  insetBlockEnd: t.spaceT(\"insetBlockEnd\"),\n  left: t.spaceT(\"left\"),\n  insetInlineStart: t.spaceT(\"insetInlineStart\"),\n  right: t.spaceT(\"right\"),\n  insetInlineEnd: t.spaceT(\"insetInlineEnd\"),\n}\n\nconfig.insetStart = config.insetInlineStart\nconfig.insetEnd = config.insetInlineEnd\n\n/**\n * Types for position CSS properties\n */\nexport interface PositionProps {\n  /**\n   * The CSS `z-index` property\n   */\n  zIndex?: ResponsiveValue<string | CSS.Property.ZIndex>\n  /**\n   * The CSS `top` property\n   */\n  top?: ResponsiveValue<CSS.Property.Top<Length>>\n  insetBlockStart?: ResponsiveValue<CSS.Property.InsetBlockStart<Length>>\n  /**\n   * The CSS `right` property\n   */\n  right?: ResponsiveValue<CSS.Property.Right<Length>>\n  /**\n   * When the direction is `ltr`, `insetInlineEnd` is equivalent to `right`.\n   * When the direction is `rtl`, `insetInlineEnd` is equivalent to `left`.\n   */\n  insetInlineEnd?: ResponsiveValue<CSS.Property.InsetInlineEnd<Length>>\n  /**\n   * When the direction is `ltr`, `insetEnd` is equivalent to `right`.\n   * When the direction is `rtl`, `insetEnd` is equivalent to `left`.\n   */\n  insetEnd?: ResponsiveValue<CSS.Property.InsetInlineEnd<Length>>\n  /**\n   * The CSS `bottom` property\n   */\n  bottom?: ResponsiveValue<CSS.Property.Bottom<Length>>\n  insetBlockEnd?: ResponsiveValue<CSS.Property.InsetBlockEnd<Length>>\n  /**\n   * The CSS `left` property\n   */\n  left?: ResponsiveValue<CSS.Property.Left<Length>>\n  insetInlineStart?: ResponsiveValue<CSS.Property.InsetInlineStart<Length>>\n  /**\n   * When the direction is `start`, `end` is equivalent to `left`.\n   * When the direction is `start`, `end` is equivalent to `right`.\n   */\n  insetStart?: ResponsiveValue<CSS.Property.InsetInlineStart<Length>>\n  /**\n   * The CSS `left`, `right`, `top`, `bottom` property\n   */\n  inset?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `left`, and `right` property\n   */\n  insetX?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `top`, and `bottom` property\n   */\n  insetY?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `position` property\n   */\n  pos?: ResponsiveValue<CSS.Property.Position>\n  /**\n   * The CSS `position` property\n   */\n  position?: ResponsiveValue<CSS.Property.Position>\n  insetInline?: ResponsiveValue<CSS.Property.InsetInline>\n  insetBlock?: ResponsiveValue<CSS.Property.InsetBlock>\n}\n\nexport const position = system(config)\nexport const positionParser = createParser(config)\n"],"file":"position.js"}