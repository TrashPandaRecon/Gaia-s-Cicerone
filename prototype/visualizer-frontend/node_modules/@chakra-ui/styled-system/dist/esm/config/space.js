import { createParser, system } from "@styled-system/core";
import { t } from "../utils";
var config = {
  margin: t.spaceT("margin"),
  marginTop: t.spaceT("marginTop"),
  marginBlockStart: t.spaceT("marginBlockStart"),
  marginRight: t.spaceT("marginRight"),
  marginInlineEnd: t.spaceT("marginInlineEnd"),
  marginBottom: t.spaceT("marginBottom"),
  marginBlockEnd: t.spaceT("marginBlockEnd"),
  marginLeft: t.spaceT("marginLeft"),
  marginInlineStart: t.spaceT("marginInlineStart"),
  marginX: t.spaceT(["marginLeft", "marginRight"]),
  marginInline: t.spaceT("marginInline"),
  marginY: t.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t.spaceT("marginBlock"),
  padding: t.space("padding"),
  paddingTop: t.space("paddingTop"),
  paddingBlockStart: t.space("paddingBlockStart"),
  paddingRight: t.space("paddingRight"),
  paddingBottom: t.space("paddingBottom"),
  paddingBlockEnd: t.space("paddingBlockEnd"),
  paddingLeft: t.space("paddingLeft"),
  paddingInlineStart: t.space("paddingInlineStart"),
  paddingInlineEnd: t.space("paddingInlineEnd"),
  paddingX: t.space(["paddingLeft", "paddingRight"]),
  paddingInline: t.space("paddingInline"),
  paddingY: t.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t.space("paddingBlock")
};
config.m = config.margin;
config.mt = config.marginTop;
config.mr = config.marginRight;
config.me = config.marginInlineEnd;
config.marginEnd = config.marginInlineEnd;
config.mb = config.marginBottom;
config.ml = config.marginLeft;
config.ms = config.marginInlineStart;
config.marginStart = config.marginInlineStart;
config.mx = config.marginX;
config.my = config.marginY;
config.p = config.padding;
config.pt = config.paddingTop;
config.py = config.paddingY;
config.px = config.paddingX;
config.pb = config.paddingBottom;
config.pl = config.paddingLeft;
config.ps = config.paddingInlineStart;
config.paddingStart = config.paddingInlineStart;
config.pr = config.paddingRight;
config.pe = config.paddingInlineEnd;
config.paddingEnd = config.paddingInlineEnd;
/**
 * Types for space related CSS properties
 */

/**
 * Converts shorthand or longhand margin and padding props to margin and padding CSS declarations
 *
 * - Numbers from 0-4 (or the length of theme.space) are converted to values on the spacing scale.
 * - Negative values can be used for negative margins.
 * - Numbers greater than the length of the theme.space array are converted to raw pixel values.
 * - String values are passed as raw CSS values.
 * - Array values are converted into responsive values.
 */
export var space = system(config);
export var spaceParser = createParser(config);
//# sourceMappingURL=space.js.map