"use strict";

exports.__esModule = true;
exports.borderParser = exports.border = void 0;

var _core = require("@styled-system/core");

var _utils = require("../utils");

var config = {
  border: _utils.t.borders("border"),
  borderWidth: _utils.t.borderWidths("borderWidth"),
  borderStyle: _utils.t.borderStyles("borderStyle"),
  borderColor: _utils.t.colors("borderColor"),
  borderRadius: _utils.t.radii("borderRadius"),
  borderTop: _utils.t.borders("borderTop"),
  borderBlockStart: _utils.t.borders("borderBlockStart"),
  borderTopLeftRadius: _utils.t.radii("borderTopLeftRadius"),
  borderStartStartRadius: {
    property: "&",
    scale: "radii",
    transform: (0, _utils.polyfill)({
      ltr: "borderTopLeftRadius",
      rtl: "borderTopRightRadius"
    })
  },
  borderEndStartRadius: {
    property: "&",
    scale: "radii",
    transform: (0, _utils.polyfill)({
      ltr: "borderBottomLeftRadius",
      rtl: "borderBottomRightRadius"
    })
  },
  borderTopRightRadius: _utils.t.radii("borderTopRightRadius"),
  borderStartEndRadius: {
    property: "&",
    scale: "radii",
    transform: (0, _utils.polyfill)({
      ltr: "borderTopRightRadius",
      rtl: "borderTopLeftRadius"
    })
  },
  borderEndEndRadius: {
    property: "&",
    scale: "radii",
    transform: (0, _utils.polyfill)({
      ltr: "borderBottomRightRadius",
      rtl: "borderBottomLeftRadius"
    })
  },
  borderRight: _utils.t.borders("borderRight"),
  borderInlineEnd: _utils.t.borders("borderInlineEnd"),
  borderBottom: _utils.t.borders("borderBottom"),
  borderBlockEnd: _utils.t.borders("borderBlockEnd"),
  borderBottomLeftRadius: _utils.t.radii("borderBottomLeftRadius"),
  borderBottomRightRadius: _utils.t.radii("borderBottomRightRadius"),
  borderLeft: _utils.t.borders("borderLeft"),
  borderInlineStart: {
    property: "borderInlineStart",
    scale: "borders"
  },
  borderInlineStartRadius: {
    scale: "radii",
    property: "&",
    transform: (0, _utils.polyfill)({
      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
    })
  },
  borderInlineEndRadius: {
    scale: "radii",
    property: "&",
    transform: (0, _utils.polyfill)({
      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
    })
  },
  borderX: _utils.t.borders(["borderLeft", "borderRight"]),
  borderInline: _utils.t.borders("borderInline"),
  borderY: _utils.t.borders(["borderTop", "borderBottom"]),
  borderBlock: _utils.t.borders("borderBlock"),
  borderTopWidth: _utils.t.borderWidths("borderTopWidth"),
  borderBlockStartWidth: _utils.t.borderWidths("borderBlockStartWidth"),
  borderTopColor: _utils.t.colors("borderTopColor"),
  borderBlockStartColor: _utils.t.colors("borderBlockStartColor"),
  borderTopStyle: _utils.t.borderStyles("borderTopStyle"),
  borderBlockStartStyle: _utils.t.borderStyles("borderBlockStartStyle"),
  borderBottomWidth: _utils.t.borderWidths("borderBottomWidth"),
  borderBlockEndWidth: _utils.t.borderWidths("borderBlockEndWidth"),
  borderBottomColor: _utils.t.colors("borderBottomColor"),
  borderBlockEndColor: _utils.t.colors("borderBlockEndColor"),
  borderBottomStyle: _utils.t.borderStyles("borderBottomStyle"),
  borderBlockEndStyle: _utils.t.borderStyles("borderBlockEndStyle"),
  borderLeftWidth: _utils.t.borderWidths("borderLeftWidth"),
  borderInlineStartWidth: _utils.t.borderWidths("borderInlineStartWidth"),
  borderLeftColor: _utils.t.colors("borderLeftColor"),
  borderInlineStartColor: _utils.t.colors("borderInlineStartColor"),
  borderLeftStyle: _utils.t.borderStyles("borderLeftStyle"),
  borderInlineStartStyle: _utils.t.borderStyles("borderInlineStartStyle"),
  borderRightWidth: _utils.t.borderWidths("borderRightWidth"),
  borderInlineEndWidth: _utils.t.borderWidths("borderInlineEndWidth"),
  borderRightColor: _utils.t.colors("borderRightColor"),
  borderInlineEndColor: _utils.t.colors("borderInlineEndColor"),
  borderRightStyle: _utils.t.borderStyles("borderRightStyle"),
  borderInlineEndStyle: _utils.t.borderStyles("borderInlineEndStyle"),
  borderTopRadius: _utils.t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
  borderBottomRadius: _utils.t.radii(["borderBottomLeftRadius", "borderBottomRightRadius"]),
  borderLeftRadius: _utils.t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
  borderRightRadius: _utils.t.radii(["borderTopRightRadius", "borderBottomRightRadius"])
};
config.roundedTopLeft = config.borderTopLeftRadius;
config.roundedTopStart = config.borderStartStartRadius;
config.roundedTopRight = config.borderTopRightRadius;
config.roundedTopEnd = config.borderStartEndRadius;
config.roundedBottomLeft = config.borderBottomLeftRadius;
config.roundedBottomStart = config.borderEndStartRadius;
config.roundedBottomRight = config.borderBottomRightRadius;
config.roundedBottomEnd = config.borderEndEndRadius;
config.rounded = config.borderRadius;
config.roundedTop = config.borderTopRadius;
config.roundedBottom = config.borderBottomRadius;
config.roundedLeft = config.borderLeftRadius;
config.roundedRight = config.borderRightRadius;
config.roundedStart = config.borderInlineStartRadius;
config.borderStartRadius = config.borderInlineStartRadius;
config.roundedEnd = config.borderInlineEndRadius;
config.borderEndRadius = config.borderInlineEndRadius;
config.borderEndWidth = config.borderInlineEndWidth;
config.borderStartWidth = config.borderInlineStartWidth;
/**
 * The prop types for border properties listed above
 */

var border = (0, _core.system)(config);
exports.border = border;
var borderParser = (0, _core.createParser)(config);
exports.borderParser = borderParser;
//# sourceMappingURL=border.js.map