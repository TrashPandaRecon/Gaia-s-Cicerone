{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Flex, Skeleton } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport { InteractiveForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport { SingletonSocket } from '../SingletonSocket';\n\nconst socketIOClient = require('socket.io-client'); // data structure definitions for NodeGraph component\n\n\nclass SocialNodeGraph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"scale\", scaleCategory20());\n\n    this.state = {\n      socialdataresponse: {\n        nodes: [],\n        links: []\n      },\n      dataPipe: this.props.dataPipe,\n      socketConnection: SingletonSocket.getInstance().getSocket()\n    };\n  }\n\n  componentDidMount() {\n    const {\n      socketConnection,\n      dataPipe\n    } = this.state;\n    socketConnection.on(dataPipe, data => this.setState({\n      socialdataresponse: data\n    }));\n  }\n\n  render() {\n    const {\n      socialdataresponse\n    } = this.state;\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsx(Skeleton, {\n        height: \"500px\"\n      }) : /*#__PURE__*/_jsx(Flex, {\n        p: \"4\",\n        children: /*#__PURE__*/_jsxs(InteractiveForceGraph, {\n          animation: \"wobbly\",\n          simulationOptions: {\n            height: 500,\n            width: 1000,\n            alpha: 1,\n            animate: true\n          },\n          labelAttr: \"label\",\n          highlightDependencies: true,\n          children: [socialdataresponse.nodes.map(node => /*#__PURE__*/_jsx(ForceGraphNode, {\n            node: {\n              id: node.id,\n              label: JSON.stringify(node),\n              radius: Math.ceil(node.income / 1000 % 10)\n            },\n            fill: this.scale(Math.ceil(node.income / 1000 % 10))\n          }, node.id)), socialdataresponse.links.map(link => /*#__PURE__*/_jsx(ForceGraphLink, {\n            link: {\n              source: link.source,\n              target: link.target,\n              value: 5 // this value is just to fix a bug in the library that prevents the node graph from being centered in the frame.\n\n            },\n            fill: \"blue\"\n          }, link.source + link.target))]\n        })\n      })\n    });\n  }\n\n}\n\nexport default SocialNodeGraph;","map":null,"metadata":{},"sourceType":"module"}