{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Box, Flex, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport { InteractiveForceGraph, ForceGraphNode, ForceGraphLink // Hint as forceHint,\n} from 'react-vis-force';\nimport { ENDPOINT } from '../config';\n\nvar socketIOClient = require('socket.io-client'); // data structure definitions for NodeGraph component\n\n\nvar SocialNodeGraph = /*#__PURE__*/function (_React$Component) {\n  _inherits(SocialNodeGraph, _React$Component);\n\n  var _super = _createSuper(SocialNodeGraph);\n\n  function SocialNodeGraph(props) {\n    var _this;\n\n    _classCallCheck(this, SocialNodeGraph);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"_forgetValue\", function () {\n      _this.setState({\n        value: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_rememberValue\", function (value) {\n      _this.setState({\n        value: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scale\", scaleCategory20());\n\n    _this.state = {\n      value: null,\n      socialdataresponse: {\n        nodes: [],\n        links: []\n      },\n      endpoint: ENDPOINT\n    };\n    return _this;\n  }\n\n  _createClass(SocialNodeGraph, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var endpoint = this.state.endpoint; //Very simply connect to the socket\n\n      var socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n      socket.on('FromSocialNodeData', function (data) {\n        return _this2.setState({\n          socialdataresponse: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          socialdataresponse = _this$state.socialdataresponse,\n          value = _this$state.value;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            children: [/*#__PURE__*/_jsxDEV(Flex, {\n              p: \"4\",\n              bg: \"steelblue\",\n              children: /*#__PURE__*/_jsxDEV(InteractiveForceGraph, {\n                animation: \"wobbly\",\n                simulationOptions: {\n                  height: 500,\n                  width: 500,\n                  alpha: 1,\n                  animate: true\n                },\n                labelAttr: \"label\",\n                highlightDependencies: true,\n                onSelectNode: function onSelectNode(node) {\n                  _this3.setState({\n                    value: node.currentTarget\n                  });\n\n                  _this3.forceUpdate();\n                },\n                onDeselectNode: this._forgetValue,\n                children: [socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 10\n                }, this) : socialdataresponse.nodes.map(function (node) {\n                  return /*#__PURE__*/_jsxDEV(ForceGraphNode, {\n                    node: {\n                      id: node.id,\n                      label: node.id,\n                      income: node.income,\n                      radius: Math.ceil(node.income / 1000 % 10)\n                    },\n                    fill: _this3.scale(Math.ceil(node.income / 1000 % 10))\n                  }, node.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 88,\n                    columnNumber: 11\n                  }, _this3);\n                }), socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : socialdataresponse.links.map(function (link) {\n                  return /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n                    link: {\n                      source: link.source,\n                      target: link.target,\n                      value: 5\n                    },\n                    fill: \"blue\"\n                  }, link.source + link.target, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 11\n                  }, _this3);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              p: \"4\",\n              children: value ? /*#__PURE__*/_jsxDEV(Box, {\n                value: value,\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 28\n              }, this) : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 5\n        }, this)\n      }, void 0, false);\n    }\n  }]);\n\n  return SocialNodeGraph;\n}(React.Component);\n\nexport default SocialNodeGraph;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx"],"names":["Box","Flex","Spinner","React","scaleCategory20","InteractiveForceGraph","ForceGraphNode","ForceGraphLink","ENDPOINT","socketIOClient","require","SocialNodeGraph","props","setState","value","state","socialdataresponse","nodes","links","endpoint","socket","on","data","height","width","alpha","animate","node","currentTarget","forceUpdate","_forgetValue","length","map","id","label","income","radius","Math","ceil","scale","link","source","target","Component"],"mappings":"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","sourcesContent":["import { Alert, Box, Flex, Grid, GridItem, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport {\n\tInteractiveForceGraph,\n\tForceGraphNode,\n\tForceGraphLink,\n\t// Hint as forceHint,\n} from 'react-vis-force';\nimport { Hin as visHint } from 'react-vis';\nimport { ENDPOINT } from '../config';\nconst socketIOClient = require('socket.io-client');\n// data structure definitions for NodeGraph component\ninterface links {\n\tsource: string;\n\ttarget: string;\n}\ninterface nodes {\n\tid: string;\n\tincome: number;\n}\nexport interface nodeGraphDataStruct {\n\tnodes: nodes[];\n\tlinks: links[];\n}\ninterface nodeGraphDataProps {\n\tvalue?: any;\n\tsocialdataresponse: nodeGraphDataStruct;\n\tendpoint: string;\n}\n\nclass SocialNodeGraph extends React.Component<{}, nodeGraphDataProps> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\tsocialdataresponse: { nodes: [], links: [] },\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n\t_forgetValue = () => {\n\t\tthis.setState({\n\t\t\tvalue: null,\n\t\t});\n\t};\n\n\t_rememberValue = (value) => {\n\t\tthis.setState({ value });\n\t};\n\n\tscale = scaleCategory20();\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\t\tsocket.on('FromSocialNodeData', (data) =>\n\t\t\tthis.setState({ socialdataresponse: data })\n\t\t);\n\t}\n\trender() {\n\t\tconst { socialdataresponse, value } = this.state;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Box>\n\t\t\t\t\t<Flex>\n\t\t\t\t\t\t<Flex p=\"4\" bg=\"steelblue\">\n\t\t\t\t\t\t\t<InteractiveForceGraph\n\t\t\t\t\t\t\t\tanimation=\"wobbly\"\n\t\t\t\t\t\t\t\tsimulationOptions={{\n\t\t\t\t\t\t\t\t\theight: 500,\n\t\t\t\t\t\t\t\t\twidth: 500,\n\t\t\t\t\t\t\t\t\talpha: 1,\n\t\t\t\t\t\t\t\t\tanimate: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tlabelAttr=\"label\"\n\t\t\t\t\t\t\t\thighlightDependencies\n\t\t\t\t\t\t\t\tonSelectNode={(node) => {\n\t\t\t\t\t\t\t\t\tthis.setState({ value: node.currentTarget});\n\t\t\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonDeselectNode={this._forgetValue}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tsocialdataresponse.nodes.map((node) => (\n\t\t\t\t\t\t\t\t\t\t<ForceGraphNode\n\t\t\t\t\t\t\t\t\t\t\tkey={node.id}\n\t\t\t\t\t\t\t\t\t\t\tnode={{\n\t\t\t\t\t\t\t\t\t\t\t\tid: node.id,\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: node.id,\n\t\t\t\t\t\t\t\t\t\t\t\tincome: node.income,\n\t\t\t\t\t\t\t\t\t\t\t\tradius: Math.ceil((node.income / 1000) % 10),\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tfill={this.scale(Math.ceil((node.income / 1000) % 10))}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tsocialdataresponse.links.map((link) => (\n\t\t\t\t\t\t\t\t\t\t<ForceGraphLink\n\t\t\t\t\t\t\t\t\t\t\tkey={link.source + link.target}\n\t\t\t\t\t\t\t\t\t\t\tlink={{\n\t\t\t\t\t\t\t\t\t\t\t\tsource: link.source,\n\t\t\t\t\t\t\t\t\t\t\t\ttarget: link.target,\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: 5,\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tfill=\"blue\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</InteractiveForceGraph>\n\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t<Flex p=\"4\">{value ? <Box value={value}>{value}</Box> : null}</Flex>\n\t\t\t\t\t</Flex>\n\t\t\t\t</Box>\n\t\t\t</>\n\t\t);\n\t}\n}\nexport default SocialNodeGraph;\n"]},"metadata":{},"sourceType":"module"}