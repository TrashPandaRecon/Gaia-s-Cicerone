{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/LineChart.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineMarkSeries, DiscreteColorLegend, Hint } from 'react-vis';\nimport * as d3 from 'd3';\nimport { Box, Grid, GridItem, Skeleton } from '@chakra-ui/react';\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_clickHandler\", item => {\n      const {\n        items\n      } = this.state;\n      item.disabled = !item.disabled;\n      this.setState({\n        items\n      });\n    });\n\n    var itemArray = [];\n\n    for (let i = 0; i < this.props.dataPipe.length; i++) {\n      itemArray.push({\n        title: this.props.dataPipe[i].split(' ')[0]\n      });\n    }\n\n    this.state = {\n      graphdataStorage: [],\n      dataPipe: this.props.dataPipe,\n      socketConnection: SingletonSocket.getInstance().getSocket(),\n      items: itemArray,\n      searchText: '',\n      value: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dataPipe,\n      socketConnection,\n      graphdataStorage\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.on(dataPipe[i], data => {\n        graphdataStorage.splice(i, 1, {\n          graphData: data,\n          Label: dataPipe[i]\n        });\n        this.setState({\n          graphdataStorage: graphdataStorage\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      dataPipe,\n      socketConnection\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.off(dataPipe[i], data => {});\n    }\n  }\n\n  render() {\n    const {\n      graphdataStorage,\n      value,\n      items,\n      searchText\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: graphdataStorage.length == 0 ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        height: \"500px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          h: \"450px\",\n          templateColumns: \"repeat(8, 1fr)\",\n          gap: 4,\n          children: [/*#__PURE__*/_jsxDEV(GridItem, {\n            colSpan: 7,\n            children: /*#__PURE__*/_jsxDEV(XYPlot, {\n              onMouseLeave: () => this.setState({\n                value: null\n              }),\n              xType: \"time\",\n              width: 630,\n              height: 450,\n              animation: true,\n              margin: {\n                bottom: 80,\n                left: 50,\n                right: 10,\n                top: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                tickLabelAngle: -45,\n                tickTotal: 10\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                tickFormat: tick => d3.format('.2s')(tick)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 10\n              }, this), graphdataStorage.map(graphdata => /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n                curve: 'curveMonotoneX' //className={graphdata.Label}\n                ,\n                data: graphdata.graphData,\n                opacity: 1,\n                strokeStyle: \"solid\",\n                style: {},\n                onValueMouseOver: d => {\n                  this.setState({\n                    value: d\n                  });\n                }\n              }, graphdata.Label, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 11\n              }, this)), value && /*#__PURE__*/_jsxDEV(Hint, {\n                value: value,\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  maxW: \"sm\",\n                  borderWidth: \"1px\",\n                  borderRadius: \"lg\",\n                  overflow: \"hidden\",\n                  p: \"6\",\n                  bg: \"te\",\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    mt: \"1\",\n                    fontWeight: \"semibold\",\n                    as: \"h3\",\n                    lineHeight: \"tight\",\n                    isTruncated: true,\n                    children: \"Visitors\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(Box, {\n                    children: d3.format('.2s')(value.y)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 14\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 12\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            colSpan: 1,\n            children: /*#__PURE__*/_jsxDEV(DiscreteColorLegend, {\n              orientation: \"vertical\",\n              height: 650,\n              width: 120 // onItemClick={this._clickHandler}\n              ,\n              items: items\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/LineChart.tsx"],"names":["React","SingletonSocket","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineMarkSeries","DiscreteColorLegend","Hint","d3","Box","Grid","GridItem","Skeleton","BarChart","Component","constructor","props","item","items","state","disabled","setState","itemArray","i","dataPipe","length","push","title","split","graphdataStorage","socketConnection","getInstance","getSocket","searchText","value","componentDidMount","on","data","splice","graphData","Label","componentWillUnmount","off","render","bottom","left","right","top","tick","format","map","graphdata","d","y"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SACCC,MADD,EAECC,KAFD,EAGCC,KAHD,EAICC,iBAJD,EAKCC,mBALD,EASCC,cATD,EAWCC,mBAXD,EAYCC,IAZD,QAaO,WAbP;AAcA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,QAA9B,QAAuD,kBAAvD;;AAoBA,MAAMC,QAAN,SAAuBf,KAAK,CAACgB,SAA7B,CAA4E;AAC3EC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,2CA+BFC,IAAD,IAAU;AACzB,YAAM;AAAEC,QAAAA;AAAF,UAAY,KAAKC,KAAvB;AACAF,MAAAA,IAAI,CAACG,QAAL,GAAgB,CAACH,IAAI,CAACG,QAAtB;AACA,WAAKC,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACA,KAnCkB;;AAElB,QAAII,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,KAAL,CAAWQ,QAAX,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACpDD,MAAAA,SAAS,CAACI,IAAV,CAAe;AAAEC,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWQ,QAAX,CAAoBD,CAApB,EAAuBK,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC;AAAT,OAAf;AACA;;AACD,SAAKT,KAAL,GAAa;AACZU,MAAAA,gBAAgB,EAAE,EADN;AAEZL,MAAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWQ,QAFT;AAGZM,MAAAA,gBAAgB,EAAE/B,eAAe,CAACgC,WAAhB,GAA8BC,SAA9B,EAHN;AAIZd,MAAAA,KAAK,EAAEI,SAJK;AAKZW,MAAAA,UAAU,EAAE,EALA;AAMZC,MAAAA,KAAK,EAAE;AANK,KAAb;AAQA;;AAEDC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEX,MAAAA,QAAF;AAAYM,MAAAA,gBAAZ;AAA8BD,MAAAA;AAA9B,QAAmD,KAAKV,KAA9D;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,QAAQ,CAACC,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACzCO,MAAAA,gBAAgB,CAACM,EAAjB,CAAoBZ,QAAQ,CAACD,CAAD,CAA5B,EAAkCc,IAAD,IAAU;AAC1CR,QAAAA,gBAAgB,CAACS,MAAjB,CAAwBf,CAAxB,EAA2B,CAA3B,EAA8B;AAAEgB,UAAAA,SAAS,EAAEF,IAAb;AAAmBG,UAAAA,KAAK,EAAEhB,QAAQ,CAACD,CAAD;AAAlC,SAA9B;AACA,aAAKF,QAAL,CAAc;AAAEQ,UAAAA,gBAAgB,EAAEA;AAApB,SAAd;AACA,OAHD;AAIA;AACD;;AACDY,EAAAA,oBAAoB,GAAG;AACtB,UAAM;AAAEjB,MAAAA,QAAF;AAAYM,MAAAA;AAAZ,QAAiC,KAAKX,KAA5C;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,QAAQ,CAACC,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACzCO,MAAAA,gBAAgB,CAACY,GAAjB,CAAqBlB,QAAQ,CAACD,CAAD,CAA7B,EAAmCc,IAAD,IAAU,CAAE,CAA9C;AACA;AACD;;AAODM,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEd,MAAAA,gBAAF;AAAoBK,MAAAA,KAApB;AAA2BhB,MAAAA,KAA3B;AAAkCe,MAAAA;AAAlC,QAAiD,KAAKd,KAA5D;AACA,wBACC;AAAA,gBACEU,gBAAgB,CAACJ,MAAjB,IAA2B,CAA3B,gBACA,QAAC,QAAD;AAAU,QAAA,MAAM,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,cADA,gBAGA;AAAA,+BACC,QAAC,IAAD;AAAM,UAAA,CAAC,EAAC,OAAR;AAAgB,UAAA,eAAe,EAAC,gBAAhC;AAAiD,UAAA,GAAG,EAAE,CAAtD;AAAA,kCACC,QAAC,QAAD;AAAU,YAAA,OAAO,EAAE,CAAnB;AAAA,mCACC,QAAC,MAAD;AACC,cAAA,YAAY,EAAE,MAAM,KAAKJ,QAAL,CAAc;AAAEa,gBAAAA,KAAK,EAAE;AAAT,eAAd,CADrB;AAEC,cAAA,KAAK,EAAC,MAFP;AAGC,cAAA,KAAK,EAAE,GAHR;AAIC,cAAA,MAAM,EAAE,GAJT;AAKC,cAAA,SAAS,EAAE,IALZ;AAMC,cAAA,MAAM,EAAE;AAAEU,gBAAAA,MAAM,EAAE,EAAV;AAAcC,gBAAAA,IAAI,EAAE,EAApB;AAAwBC,gBAAAA,KAAK,EAAE,EAA/B;AAAmCC,gBAAAA,GAAG,EAAE;AAAxC,eANT;AAAA,sCAQC,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,sBARD,eASC,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,sBATD,eAUC,QAAC,KAAD;AAAO,gBAAA,cAAc,EAAE,CAAC,EAAxB;AAA4B,gBAAA,SAAS,EAAE;AAAvC;AAAA;AAAA;AAAA;AAAA,sBAVD,eAWC,QAAC,KAAD;AAAO,gBAAA,UAAU,EAAGC,IAAD,IAAUxC,EAAE,CAACyC,MAAH,CAAU,KAAV,EAAiBD,IAAjB;AAA7B;AAAA;AAAA;AAAA;AAAA,sBAXD,EAaEnB,gBAAgB,CAACqB,GAAjB,CAAsBC,SAAD,iBACrB,QAAC,cAAD;AACC,gBAAA,KAAK,EAAE,gBADR,CAEC;AAFD;AAIC,gBAAA,IAAI,EAAEA,SAAS,CAACZ,SAJjB;AAKC,gBAAA,OAAO,EAAE,CALV;AAMC,gBAAA,WAAW,EAAC,OANb;AAOC,gBAAA,KAAK,EAAE,EAPR;AAQC,gBAAA,gBAAgB,EAAGa,CAAD,IAAO;AACxB,uBAAK/B,QAAL,CAAc;AAAEa,oBAAAA,KAAK,EAAEkB;AAAT,mBAAd;AACA;AAVF,iBAGMD,SAAS,CAACX,KAHhB;AAAA;AAAA;AAAA;AAAA,sBADA,CAbF,EA2BEN,KAAK,iBACL,QAAC,IAAD;AAAM,gBAAA,KAAK,EAAEA,KAAb;AAAA,uCACC,QAAC,GAAD;AACC,kBAAA,IAAI,EAAC,IADN;AAEC,kBAAA,WAAW,EAAC,KAFb;AAGC,kBAAA,YAAY,EAAC,IAHd;AAIqC,kBAAA,QAAQ,EAAC,QAJ9C;AAKyC,kBAAA,CAAC,EAAC,GAL3C;AAMyC,kBAAA,EAAE,EAAC,IAN5C;AAAA,0CAQC,QAAC,GAAD;AACC,oBAAA,EAAE,EAAC,GADJ;AAEC,oBAAA,UAAU,EAAC,UAFZ;AAGC,oBAAA,EAAE,EAAC,IAHJ;AAIC,oBAAA,UAAU,EAAC,OAJZ;AAKC,oBAAA,WAAW,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BARD,eAiBE,QAAC,GAAD;AAAA,8BAAM1B,EAAE,CAACyC,MAAH,CAAU,KAAV,EAAiBf,KAAK,CAACmB,CAAvB;AAAN;AAAA;AAAA;AAAA;AAAA,0BAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,sBA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBADD,eAuDC,QAAC,QAAD;AAAU,YAAA,OAAO,EAAE,CAAnB;AAAA,mCACC,QAAC,mBAAD;AACC,cAAA,WAAW,EAAC,UADb;AAEC,cAAA,MAAM,EAAE,GAFT;AAGC,cAAA,KAAK,EAAE,GAHR,CAIC;AAJD;AAKC,cAAA,KAAK,EAAEnC;AALR;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBAvDD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAJF;AAAA;AAAA;AAAA;AAAA,YADD;AA2EA;;AAnH0E;;AAsH5E,eAAeL,QAAf","sourcesContent":["import React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport {\n\tXYPlot,\n\tXAxis,\n\tYAxis,\n\tVerticalGridLines,\n\tHorizontalGridLines,\n\tVerticalBarSeries,\n\tVerticalBarSeriesCanvas,\n\tLabelSeries,\n\tLineMarkSeries,\n\tCrosshair,\n\tDiscreteColorLegend,\n\tHint,\n} from 'react-vis';\nimport * as d3 from 'd3';\nimport { Box, Grid, GridItem, Skeleton, Spinner } from '@chakra-ui/react';\nimport { dataPipes } from '../config/dataPipeEnum';\nimport { delay } from '../Util/delay';\ninterface XYResponseStruct {\n\tx: string;\n\ty: number;\n}\ninterface XYResponseGraphData {\n\tgraphData: XYResponseStruct[];\n\tLabel: string;\n}\ninterface XYDataProps {\n\tgraphdataStorage: XYResponseGraphData[];\n\tdataPipe: string[];\n\tsocketConnection: any;\n\tvalue?: any;\n\titems?: any;\n\tsearchText?: any;\n}\n\nclass BarChart extends React.Component<{ dataPipe: string[] }, XYDataProps> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar itemArray = [];\n\t\tfor (let i = 0; i < this.props.dataPipe.length; i++) {\n\t\t\titemArray.push({ title: this.props.dataPipe[i].split(' ')[0] });\n\t\t}\n\t\tthis.state = {\n\t\t\tgraphdataStorage: [],\n\t\t\tdataPipe: this.props.dataPipe,\n\t\t\tsocketConnection: SingletonSocket.getInstance().getSocket(),\n\t\t\titems: itemArray,\n\t\t\tsearchText: '',\n\t\t\tvalue: null,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { dataPipe, socketConnection, graphdataStorage } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.on(dataPipe[i], (data) => {\n\t\t\t\tgraphdataStorage.splice(i, 1, { graphData: data, Label: dataPipe[i] });\n\t\t\t\tthis.setState({ graphdataStorage: graphdataStorage });\n\t\t\t});\n\t\t}\n\t}\n\tcomponentWillUnmount() {\n\t\tconst { dataPipe, socketConnection } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.off(dataPipe[i], (data) => {});\n\t\t}\n\t}\n\t_clickHandler = (item) => {\n\t\tconst { items } = this.state;\n\t\titem.disabled = !item.disabled;\n\t\tthis.setState({ items });\n\t};\n\n\trender() {\n\t\tconst { graphdataStorage, value, items, searchText } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{graphdataStorage.length == 0 ? (\n\t\t\t\t\t<Skeleton height=\"500px\"></Skeleton>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Grid h=\"450px\" templateColumns=\"repeat(8, 1fr)\" gap={4}>\n\t\t\t\t\t\t\t<GridItem colSpan={7}>\n\t\t\t\t\t\t\t\t<XYPlot\n\t\t\t\t\t\t\t\t\tonMouseLeave={() => this.setState({ value: null })}\n\t\t\t\t\t\t\t\t\txType=\"time\"\n\t\t\t\t\t\t\t\t\twidth={630}\n\t\t\t\t\t\t\t\t\theight={450}\n\t\t\t\t\t\t\t\t\tanimation={true}\n\t\t\t\t\t\t\t\t\tmargin={{ bottom: 80, left: 50, right: 10, top: 20 }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VerticalGridLines />\n\t\t\t\t\t\t\t\t\t<HorizontalGridLines />\n\t\t\t\t\t\t\t\t\t<XAxis tickLabelAngle={-45} tickTotal={10} />\n\t\t\t\t\t\t\t\t\t<YAxis tickFormat={(tick) => d3.format('.2s')(tick)} />\n\n\t\t\t\t\t\t\t\t\t{graphdataStorage.map((graphdata) => (\n\t\t\t\t\t\t\t\t\t\t<LineMarkSeries\n\t\t\t\t\t\t\t\t\t\t\tcurve={'curveMonotoneX'}\n\t\t\t\t\t\t\t\t\t\t\t//className={graphdata.Label}\n\t\t\t\t\t\t\t\t\t\t\tkey={graphdata.Label}\n\t\t\t\t\t\t\t\t\t\t\tdata={graphdata.graphData}\n\t\t\t\t\t\t\t\t\t\t\topacity={1}\n\t\t\t\t\t\t\t\t\t\t\tstrokeStyle=\"solid\"\n\t\t\t\t\t\t\t\t\t\t\tstyle={{}}\n\t\t\t\t\t\t\t\t\t\t\tonValueMouseOver={(d) => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ value: d });\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t{value && (\n\t\t\t\t\t\t\t\t\t\t<Hint value={value}>\n\t\t\t\t\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\t\t\t\t\tmaxW=\"sm\"\n\t\t\t\t\t\t\t\t\t\t\t\tborderWidth=\"1px\"\n\t\t\t\t\t\t\t\t\t\t\t\tborderRadius=\"lg\"\n                                                overflow=\"hidden\"\n                                                    p=\"6\"\n                                                    bg=\"te\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\t\t\t\t\t\tmt=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tfontWeight=\"semibold\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tas=\"h3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlineHeight=\"tight\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tisTruncated\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tVisitors\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Box>{d3.format('.2s')(value.y)}</Box>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t</Hint>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</XYPlot>\n\t\t\t\t\t\t\t</GridItem>\n\t\t\t\t\t\t\t<GridItem colSpan={1}>\n\t\t\t\t\t\t\t\t<DiscreteColorLegend\n\t\t\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\t\t\theight={650}\n\t\t\t\t\t\t\t\t\twidth={120}\n\t\t\t\t\t\t\t\t\t// onItemClick={this._clickHandler}\n\t\t\t\t\t\t\t\t\titems={items}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</GridItem>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}