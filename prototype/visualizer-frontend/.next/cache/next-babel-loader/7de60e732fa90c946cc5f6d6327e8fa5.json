{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineMarkSeries, DiscreteColorLegend, Hint } from 'react-vis';\nimport * as d3 from 'd3';\nimport { Box, Grid, GridItem, Skeleton } from '@chakra-ui/react';\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_clickHandler\", item => {\n      const {\n        items\n      } = this.state;\n      item.disabled = !item.disabled;\n      this.setState({\n        items\n      });\n    });\n\n    var itemArray = [];\n\n    for (let i = 0; i < this.props.dataPipe.length; i++) {\n      itemArray.push({\n        title: this.props.dataPipe[i].split(' ')[0]\n      });\n    }\n\n    this.state = {\n      graphdataStorage: [],\n      dataPipe: this.props.dataPipe,\n      socketConnection: SingletonSocket.getInstance().getSocket(),\n      items: itemArray,\n      searchText: '',\n      value: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dataPipe,\n      socketConnection,\n      graphdataStorage\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.on(dataPipe[i], data => {\n        graphdataStorage.splice(i, 1, {\n          graphData: data,\n          Label: dataPipe[i]\n        });\n        this.setState({\n          graphdataStorage: graphdataStorage\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      dataPipe,\n      socketConnection\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.off(dataPipe[i], data => {});\n    }\n  }\n\n  render() {\n    const {\n      graphdataStorage,\n      value,\n      items,\n      searchText\n    } = this.state;\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: graphdataStorage.length == 0 ? /*#__PURE__*/_jsx(Skeleton, {\n        height: \"500px\"\n      }) : /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsxs(Grid, {\n          h: \"450px\",\n          templateColumns: \"repeat(8, 1fr)\",\n          gap: 4,\n          children: [/*#__PURE__*/_jsx(GridItem, {\n            colSpan: 7,\n            children: /*#__PURE__*/_jsxs(XYPlot, {\n              onMouseLeave: () => this.setState({\n                value: null\n              }),\n              xType: \"time\",\n              width: 630,\n              height: 450,\n              animation: true,\n              margin: {\n                bottom: 80,\n                left: 50,\n                right: 10,\n                top: 20\n              },\n              children: [/*#__PURE__*/_jsx(VerticalGridLines, {}), /*#__PURE__*/_jsx(HorizontalGridLines, {}), /*#__PURE__*/_jsx(XAxis, {\n                tickLabelAngle: -45,\n                tickTotal: 10\n              }), /*#__PURE__*/_jsx(YAxis, {\n                tickFormat: tick => d3.format('.2s')(tick)\n              }), graphdataStorage.map(graphdata => /*#__PURE__*/_jsx(LineMarkSeries, {\n                curve: 'curveMonotoneX' //className={graphdata.Label}\n                ,\n                data: graphdata.graphData,\n                opacity: 1,\n                strokeStyle: \"solid\",\n                style: {},\n                onValueMouseOver: d => {\n                  this.setState({\n                    value: d\n                  });\n                }\n              }, graphdata.Label)), value && /*#__PURE__*/_jsx(Hint, {\n                value: value,\n                children: /*#__PURE__*/_jsxs(Box, {\n                  maxW: \"sm\",\n                  borderWidth: \"1px\",\n                  borderRadius: \"lg\",\n                  overflow: \"hidden\",\n                  p: \"1\",\n                  bg: \"steelblue\",\n                  color: \"white\",\n                  children: [/*#__PURE__*/_jsxs(Box, {\n                    children: [\"Visitors: \", d3.format('.2s')(value.y)]\n                  }), /*#__PURE__*/_jsxs(Box, {\n                    children: [\"Date: \", new Date(value.x).toLocaleDateString()]\n                  })]\n                })\n              })]\n            })\n          }), /*#__PURE__*/_jsx(GridItem, {\n            colSpan: 1,\n            children: /*#__PURE__*/_jsx(DiscreteColorLegend, {\n              orientation: \"vertical\",\n              height: 650,\n              width: 120 // onItemClick={this._clickHandler}\n              ,\n              items: items\n            })\n          })]\n        })\n      })\n    });\n  }\n\n}\n\nexport default BarChart;","map":null,"metadata":{},"sourceType":"module"}