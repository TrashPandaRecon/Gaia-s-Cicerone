{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/LineChart.tsx\";\nimport React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, Crosshair } from 'react-vis';\nimport * as d3 from 'd3';\nimport { Skeleton } from '@chakra-ui/react';\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graphdataStorage: [],\n      dataPipe: this.props.dataPipe,\n      socketConnection: SingletonSocket.getInstance().getSocket()\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dataPipe,\n      socketConnection,\n      graphdataStorage\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.on(dataPipe[i], data => {\n        graphdataStorage.splice(i, 1, {\n          label: dataPipe[i],\n          graphData: data\n        });\n        this.setState({\n          graphdataStorage: graphdataStorage\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      dataPipe,\n      socketConnection\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.off(dataPipe[i], data => {});\n    }\n  }\n\n  render() {\n    const {\n      graphdataStorage,\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: graphdataStorage.length == 0 ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        height: \"500px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(XYPlot, {\n        onMouseLeave: () => this.setState({\n          value: false\n        }),\n        xType: \"time\",\n        width: 750,\n        height: 500,\n        animation: true,\n        margin: {\n          bottom: 80,\n          left: 50,\n          right: 10,\n          top: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          tickLabelAngle: -45,\n          tickTotal: 10\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormat: tick => d3.format('.2s')(tick)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }, this), graphdataStorage.map(graphdata => /*#__PURE__*/_jsxDEV(LineSeries, {\n          curve: 'curveMonotoneX',\n          data: graphdata,\n          opacity: 1,\n          strokeStyle: \"solid\",\n          style: {},\n          onNearestX: d => this.setState({\n            value: d\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this)), value && /*#__PURE__*/_jsxDEV(Crosshair, {\n          values: [value]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/LineChart.tsx"],"names":["React","SingletonSocket","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineSeries","Crosshair","d3","Skeleton","BarChart","Component","constructor","props","state","graphdataStorage","dataPipe","socketConnection","getInstance","getSocket","componentDidMount","i","length","on","data","splice","label","graphData","setState","componentWillUnmount","off","render","value","bottom","left","right","top","tick","format","map","graphdata","d"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport {\n\tXYPlot,\n\tXAxis,\n\tYAxis,\n\tVerticalGridLines,\n\tHorizontalGridLines,\n\tVerticalBarSeries,\n\tVerticalBarSeriesCanvas,\n\tLabelSeries,\n    LineSeries,\n    Crosshair\n} from 'react-vis';\nimport * as d3 from 'd3';\nimport { Skeleton, Spinner } from '@chakra-ui/react';\nimport { dataPipes } from '../config/dataPipeEnum';\nimport {delay} from '../Util/delay';\ninterface XYResponseStruct {\n\tx: string;\n\ty: number;\n}\ninterface XYResponseGraphData {\n    graphData: XYResponseStruct[]\n    Label: string\n}\ninterface XYDataProps {\n\tgraphdataStorage: XYResponseGraphData[];\n\tdataPipe: string[];\n    socketConnection: any;\n    value?:any\n}\n\nclass BarChart extends React.Component<\n\t{ dataPipe: string[]; yAxisName: string },\n\tXYDataProps\n> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgraphdataStorage: [],\n\t\t\tdataPipe: this.props.dataPipe,\n\t\t\tsocketConnection: SingletonSocket.getInstance().getSocket(),\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { dataPipe, socketConnection, graphdataStorage } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.on(dataPipe[i], (data) => {\n                graphdataStorage.splice(i, 1, {label: dataPipe[i],graphData: data});\n\t\t\t\tthis.setState({ graphdataStorage: graphdataStorage });\n\t\t\t});\n\t\t}\n\t}\n    componentWillUnmount() {\n        const { dataPipe, socketConnection} = this.state;\n\t\t\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\t\t\tsocketConnection.off(dataPipe[i], (data) => {\n\t\t\t\t\t});\n\t\t\t\t}\n    }\n\trender() {\n\t\tconst { graphdataStorage,value } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{graphdataStorage.length == 0 ? (\n\t\t\t\t\t<Skeleton height=\"500px\"></Skeleton>\n\t\t\t\t) : (\n\t\t\t\t\t<XYPlot\n\t\t\t\t\t\tonMouseLeave={() => this.setState({ value: false })}\n\t\t\t\t\t\txType=\"time\"\n\t\t\t\t\t\twidth={750}\n\t\t\t\t\t\theight={500}\n\t\t\t\t\t\tanimation={true}\n\t\t\t\t\t\tmargin={{ bottom: 80, left: 50, right: 10, top: 20 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<VerticalGridLines />\n\t\t\t\t\t\t<HorizontalGridLines />\n\t\t\t\t\t\t<XAxis tickLabelAngle={-45} tickTotal={10} />\n\t\t\t\t\t\t<YAxis tickFormat={(tick) => d3.format('.2s')(tick)} />\n\n\t\t\t\t\t\t{graphdataStorage.map((graphdata) => (\n                            <LineSeries\n\t\t\t\t\t\t\t\tcurve={'curveMonotoneX'}\n\t\t\t\t\t\t\t\tdata={graphdata}\n\t\t\t\t\t\t\t\topacity={1}\n\t\t\t\t\t\t\t\tstrokeStyle=\"solid\"\n                                style={{}}\n                                onNearestX={d => this.setState({value: d})}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t{value && <Crosshair values={[value]} />}\n\t\t\t\t\t</XYPlot>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}