{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport { InteractiveForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force'; // import {Hint} from 'react-vis'\n\nimport { ENDPOINT } from '../config';\n\nvar socketIOClient = require('socket.io-client'); // data structure definitions for NodeGraph component\n\n\nvar SocialNodeGraph = /*#__PURE__*/function (_React$Component) {\n  _inherits(SocialNodeGraph, _React$Component);\n\n  var _super = _createSuper(SocialNodeGraph);\n\n  function SocialNodeGraph(props) {\n    var _this;\n\n    _classCallCheck(this, SocialNodeGraph);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"_forgetValue\", function () {\n      _this.setState({\n        value: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_rememberValue\", function (value) {\n      _this.setState({\n        value: value\n      });\n\n      console.log(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scale\", scaleCategory20());\n\n    _this.state = {\n      value: null,\n      socialdataresponse: {\n        nodes: [],\n        links: []\n      },\n      endpoint: ENDPOINT\n    };\n    return _this;\n  }\n\n  _createClass(SocialNodeGraph, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var endpoint = this.state.endpoint; //Very simply connect to the socket\n\n      var socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n      socket.on('FromSocialNodeData', function (data) {\n        return _this2.setState({\n          socialdataresponse: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          socialdataresponse = _this$state.socialdataresponse,\n          value = _this$state.value;\n      return /*#__PURE__*/_jsxDEV(InteractiveForceGraph, {\n        animation: \"wobbly\",\n        simulationOptions: {\n          height: 500,\n          width: 1000,\n          alpha: 1,\n          animate: true\n        },\n        labelAttr: \"label\",\n        highlightDependencies: true,\n        onSelectNode: function onSelectNode(node) {\n          return _this3.setState({\n            value: \"HellowWorld\"\n          });\n        },\n        onDeselectNode: this.setState({\n          value: null\n        }),\n        children: [socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 6\n        }, this) : socialdataresponse.nodes.map(function (node) {\n          return /*#__PURE__*/_jsxDEV(ForceGraphNode, {\n            node: {\n              id: node.id,\n              label: node.id,\n              income: node.income,\n              radius: Math.ceil(node.income / 1000 % 10)\n            },\n            fill: _this3.scale(Math.ceil(node.income / 1000 % 10))\n          }, node.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 7\n          }, _this3);\n        }), socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : socialdataresponse.links.map(function (link) {\n          return /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n            link: {\n              source: link.source,\n              target: link.target\n            },\n            fill: \"blue\"\n          }, link.source + link.target, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, _this3);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 4\n      }, this);\n    }\n  }]);\n\n  return SocialNodeGraph;\n}(React.Component);\n\nexport default SocialNodeGraph;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx"],"names":["Spinner","React","scaleCategory20","InteractiveForceGraph","ForceGraphNode","ForceGraphLink","ENDPOINT","socketIOClient","require","SocialNodeGraph","props","setState","value","console","log","state","socialdataresponse","nodes","links","endpoint","socket","on","data","height","width","alpha","animate","node","length","map","id","label","income","radius","Math","ceil","scale","link","source","target","Component"],"mappings":"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","sourcesContent":["import { Alert, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport {\n    InteractiveForceGraph,\n\tForceGraphNode,\n    ForceGraphLink,\n    Hint\n} from 'react-vis-force';\n// import {Hint} from 'react-vis'\nimport {ENDPOINT} from '../config'\nconst socketIOClient = require('socket.io-client');\n// data structure definitions for NodeGraph component\ninterface links {\n\tsource: string;\n\ttarget: string;\n}\ninterface nodes {\n    id: string;\n    income: number;\n}\nexport interface nodeGraphDataStruct {\n\tnodes: nodes[];\n    links: links[];\n    \n}\ninterface nodeGraphDataProps {\n    value?: any\n    socialdataresponse: nodeGraphDataStruct\n    endpoint: string\n}\n\nclass SocialNodeGraph extends React.Component<{}, nodeGraphDataProps> {\n    constructor(props) {\n        super(props);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\tsocialdataresponse: { nodes: [], links: [] },\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n    _forgetValue = () => {\n        this.setState({\n            value: null,\n        });\n    }\n    _rememberValue = (value) => {\n        this.setState({value});\n        console.log(value)\n\t};\n\n\n\tscale = scaleCategory20();\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\t\tsocket.on('FromSocialNodeData', (data) =>\n\t\t\tthis.setState({ socialdataresponse: data })\n        );\n\t}\n\trender() {\n\t\tconst { socialdataresponse, value } = this.state;\n\t\treturn (\n\t\t\t<InteractiveForceGraph\n\t\t\t\tanimation=\"wobbly\"\n\t\t\t\tsimulationOptions={{\n\t\t\t\t\theight: 500,\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\talpha: 1,\n\t\t\t\t\tanimate: true,\n\t\t\t\t}}\n\t\t\t\tlabelAttr=\"label\"\n\t\t\t\thighlightDependencies\n\t\t\t\tonSelectNode={(node) => this.setState({value: \"HellowWorld\"})}\n\t\t\t\tonDeselectNode={this.setState({value: null})}\n\t\t\t>\n\t\t\t\t{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t<Spinner />\n\t\t\t\t) : (\n\t\t\t\t\tsocialdataresponse.nodes.map((node) => (\n\t\t\t\t\t\t<ForceGraphNode\n\t\t\t\t\t\t\tkey={node.id}\n\t\t\t\t\t\t\tnode={{\n\t\t\t\t\t\t\t\tid: node.id,\n\t\t\t\t\t\t\t\tlabel: node.id,\n\t\t\t\t\t\t\t\tincome: node.income,\n\t\t\t\t\t\t\t\tradius: Math.ceil((node.income / 1000) % 10),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tfill={this.scale(Math.ceil((node.income / 1000) % 10))}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t)}\n                {socialdataresponse.nodes.length == 0 ? (\n                    <></>\n                ) : (\n                        socialdataresponse.links.map((link) => (\n                            <ForceGraphLink\n                                key={link.source + link.target}\n                                link={{source: link.source, target: link.target}}\n                                fill=\"blue\"\n                            />\n                        ))\n                    )}\n\t\t\t</InteractiveForceGraph>\n\t\t);\n\t}\n}\nexport default SocialNodeGraph;\n"]},"metadata":{},"sourceType":"module"}