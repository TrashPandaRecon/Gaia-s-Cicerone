{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Flex, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport { InteractiveForceGraph, ForceGraphNode, ForceGraphLink // Hint as forceHint,\n} from 'react-vis-force';\nimport { ENDPOINT } from '../config';\n\nconst socketIOClient = require('socket.io-client'); // data structure definitions for NodeGraph component\n\n\nclass SocialNodeGraph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_forgetValue\", () => {\n      this.setState({\n        value: null\n      });\n    });\n\n    _defineProperty(this, \"_rememberValue\", value => {\n      this.setState({\n        value\n      });\n    });\n\n    _defineProperty(this, \"scale\", scaleCategory20());\n\n    this.state = {\n      value: null,\n      socialdataresponse: {\n        nodes: [],\n        links: []\n      },\n      endpoint: ENDPOINT\n    };\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state; //Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on('FromSocialNodeData', data => this.setState({\n      socialdataresponse: data\n    }));\n  }\n\n  render() {\n    const {\n      socialdataresponse,\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            p: \"4\",\n            bg: \"steelblue\",\n            children: /*#__PURE__*/_jsxDEV(InteractiveForceGraph, {\n              animation: \"wobbly\",\n              simulationOptions: {\n                height: 500,\n                width: 500,\n                alpha: 1,\n                animate: true\n              },\n              labelAttr: \"label\",\n              highlightDependencies: true,\n              onSelectNode: label => {\n                this.setState({\n                  value: node.detail\n                });\n                console.log(label.toString());\n                this.forceUpdate();\n              },\n              onDeselectNode: this._forgetValue,\n              children: [socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 10\n              }, this) : socialdataresponse.nodes.map(node => /*#__PURE__*/_jsxDEV(ForceGraphNode, {\n                node: {\n                  id: node.id,\n                  label: node.id,\n                  income: node.income,\n                  radius: Math.ceil(node.income / 1000 % 10)\n                },\n                fill: this.scale(Math.ceil(node.income / 1000 % 10))\n              }, node.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 11\n              }, this)), socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : socialdataresponse.links.map(link => /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n                link: {\n                  source: link.source,\n                  target: link.target,\n                  value: 5\n                },\n                fill: \"blue\"\n              }, link.source + link.target, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 11\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            p: \"4\",\n            children: value ? /*#__PURE__*/_jsxDEV(Box, {\n              value: value,\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 28\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default SocialNodeGraph;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx"],"names":["Box","Flex","Spinner","React","scaleCategory20","InteractiveForceGraph","ForceGraphNode","ForceGraphLink","ENDPOINT","socketIOClient","require","SocialNodeGraph","Component","constructor","props","setState","value","state","socialdataresponse","nodes","links","endpoint","componentDidMount","socket","on","data","render","height","width","alpha","animate","label","node","detail","console","log","toString","forceUpdate","_forgetValue","length","map","id","income","radius","Math","ceil","scale","link","source","target"],"mappings":";;;;;;AAAA,SAAgBA,GAAhB,EAAqBC,IAArB,EAA2CC,OAA3C,QAA0D,kBAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SACCC,qBADD,EAECC,cAFD,EAGCC,cAHD,CAIC;AAJD,OAKO,iBALP;AAOA,SAASC,QAAT,QAAyB,WAAzB;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B,C,CACA;;;AAmBA,MAAMC,eAAN,SAA8BR,KAAK,CAACS,SAApC,CAAsE;AACrEC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,0CAQJ,MAAM;AACpB,WAAKC,QAAL,CAAc;AACbC,QAAAA,KAAK,EAAE;AADM,OAAd;AAGA,KAZkB;;AAAA,4CAcDA,KAAD,IAAW;AAC3B,WAAKD,QAAL,CAAc;AAAEC,QAAAA;AAAF,OAAd;AACA,KAhBkB;;AAAA,mCAkBXZ,eAAe,EAlBJ;;AAElB,SAAKa,KAAL,GAAa;AACZD,MAAAA,KAAK,EAAE,IADK;AAEZE,MAAAA,kBAAkB,EAAE;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAFR;AAGZC,MAAAA,QAAQ,EAAEb;AAHE,KAAb;AAKA;;AAYDc,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAED,MAAAA;AAAF,QAAe,KAAKJ,KAA1B,CADmB,CAEnB;;AACA,UAAMM,MAAM,GAAGd,cAAc,CAACY,QAAD,CAA7B,CAHmB,CAInB;;AACAE,IAAAA,MAAM,CAACC,EAAP,CAAU,oBAAV,EAAiCC,IAAD,IAC/B,KAAKV,QAAL,CAAc;AAAEG,MAAAA,kBAAkB,EAAEO;AAAtB,KAAd,CADD;AAGA;;AACDC,EAAAA,MAAM,GAAG;AACR,UAAM;AAAER,MAAAA,kBAAF;AAAsBF,MAAAA;AAAtB,QAAgC,KAAKC,KAA3C;AACA,wBACC;AAAA,6BACC,QAAC,GAAD;AAAA,+BACC,QAAC,IAAD;AAAA,kCACC,QAAC,IAAD;AAAM,YAAA,CAAC,EAAC,GAAR;AAAY,YAAA,EAAE,EAAC,WAAf;AAAA,mCACC,QAAC,qBAAD;AACC,cAAA,SAAS,EAAC,QADX;AAEC,cAAA,iBAAiB,EAAE;AAClBU,gBAAAA,MAAM,EAAE,GADU;AAElBC,gBAAAA,KAAK,EAAE,GAFW;AAGlBC,gBAAAA,KAAK,EAAE,CAHW;AAIlBC,gBAAAA,OAAO,EAAE;AAJS,eAFpB;AAQC,cAAA,SAAS,EAAC,OARX;AASC,cAAA,qBAAqB,MATtB;AAUC,cAAA,YAAY,EAAGC,KAAD,IAAW;AACG,qBAAKhB,QAAL,CAAc;AAACC,kBAAAA,KAAK,EAAEgB,IAAI,CAACC;AAAb,iBAAd;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,QAAN,EAAZ;AAC3B,qBAAKC,WAAL;AACA,eAdF;AAeC,cAAA,cAAc,EAAE,KAAKC,YAftB;AAAA,yBAiBEpB,kBAAkB,CAACC,KAAnB,CAAyBoB,MAAzB,IAAmC,CAAnC,gBACA,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,sBADA,GAGArB,kBAAkB,CAACC,KAAnB,CAAyBqB,GAAzB,CAA8BR,IAAD,iBAC5B,QAAC,cAAD;AAEC,gBAAA,IAAI,EAAE;AACLS,kBAAAA,EAAE,EAAET,IAAI,CAACS,EADJ;AAELV,kBAAAA,KAAK,EAAEC,IAAI,CAACS,EAFP;AAGLC,kBAAAA,MAAM,EAAEV,IAAI,CAACU,MAHR;AAILC,kBAAAA,MAAM,EAAEC,IAAI,CAACC,IAAL,CAAWb,IAAI,CAACU,MAAL,GAAc,IAAf,GAAuB,EAAjC;AAJH,iBAFP;AAQC,gBAAA,IAAI,EAAE,KAAKI,KAAL,CAAWF,IAAI,CAACC,IAAL,CAAWb,IAAI,CAACU,MAAL,GAAc,IAAf,GAAuB,EAAjC,CAAX;AARP,iBACMV,IAAI,CAACS,EADX;AAAA;AAAA;AAAA;AAAA,sBADD,CApBF,EAiCEvB,kBAAkB,CAACC,KAAnB,CAAyBoB,MAAzB,IAAmC,CAAnC,gBACA,qCADA,GAGArB,kBAAkB,CAACE,KAAnB,CAAyBoB,GAAzB,CAA8BO,IAAD,iBAC5B,QAAC,cAAD;AAEC,gBAAA,IAAI,EAAE;AACLC,kBAAAA,MAAM,EAAED,IAAI,CAACC,MADR;AAELC,kBAAAA,MAAM,EAAEF,IAAI,CAACE,MAFR;AAGLjC,kBAAAA,KAAK,EAAE;AAHF,iBAFP;AAOC,gBAAA,IAAI,EAAC;AAPN,iBACM+B,IAAI,CAACC,MAAL,GAAcD,IAAI,CAACE,MADzB;AAAA;AAAA;AAAA;AAAA,sBADD,CApCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBADD,eAoDC,QAAC,IAAD;AAAM,YAAA,CAAC,EAAC,GAAR;AAAA,sBAAajC,KAAK,gBAAG,QAAC,GAAD;AAAK,cAAA,KAAK,EAAEA,KAAZ;AAAA,wBAAoBA;AAApB;AAAA;AAAA;AAAA;AAAA,oBAAH,GAAsC;AAAxD;AAAA;AAAA;AAAA;AAAA,kBApDD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD,qBADD;AA4DA;;AA3FoE;;AA6FtE,eAAeL,eAAf","sourcesContent":["import { Alert, Box, Flex, Grid, GridItem, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport {\n\tInteractiveForceGraph,\n\tForceGraphNode,\n\tForceGraphLink,\n\t// Hint as forceHint,\n} from 'react-vis-force';\nimport { Hin as visHint } from 'react-vis';\nimport { ENDPOINT } from '../config';\nconst socketIOClient = require('socket.io-client');\n// data structure definitions for NodeGraph component\ninterface links {\n\tsource: string;\n\ttarget: string;\n}\ninterface nodes {\n\tid: string;\n\tincome: number;\n}\nexport interface nodeGraphDataStruct {\n\tnodes: nodes[];\n\tlinks: links[];\n}\ninterface nodeGraphDataProps {\n\tvalue?: any;\n\tsocialdataresponse: nodeGraphDataStruct;\n\tendpoint: string;\n}\n\nclass SocialNodeGraph extends React.Component<{}, nodeGraphDataProps> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\tsocialdataresponse: { nodes: [], links: [] },\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n\t_forgetValue = () => {\n\t\tthis.setState({\n\t\t\tvalue: null,\n\t\t});\n\t};\n\n\t_rememberValue = (value) => {\n\t\tthis.setState({ value });\n\t};\n\n\tscale = scaleCategory20();\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\t\tsocket.on('FromSocialNodeData', (data) =>\n\t\t\tthis.setState({ socialdataresponse: data })\n\t\t);\n\t}\n\trender() {\n\t\tconst { socialdataresponse, value } = this.state;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Box>\n\t\t\t\t\t<Flex>\n\t\t\t\t\t\t<Flex p=\"4\" bg=\"steelblue\">\n\t\t\t\t\t\t\t<InteractiveForceGraph\n\t\t\t\t\t\t\t\tanimation=\"wobbly\"\n\t\t\t\t\t\t\t\tsimulationOptions={{\n\t\t\t\t\t\t\t\t\theight: 500,\n\t\t\t\t\t\t\t\t\twidth: 500,\n\t\t\t\t\t\t\t\t\talpha: 1,\n\t\t\t\t\t\t\t\t\tanimate: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tlabelAttr=\"label\"\n\t\t\t\t\t\t\t\thighlightDependencies\n\t\t\t\t\t\t\t\tonSelectNode={(label) => {\n                                    this.setState({value: node.detail});\n                                    console.log(label.toString())\n\t\t\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonDeselectNode={this._forgetValue}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tsocialdataresponse.nodes.map((node) => (\n\t\t\t\t\t\t\t\t\t\t<ForceGraphNode\n\t\t\t\t\t\t\t\t\t\t\tkey={node.id}\n\t\t\t\t\t\t\t\t\t\t\tnode={{\n\t\t\t\t\t\t\t\t\t\t\t\tid: node.id,\n\t\t\t\t\t\t\t\t\t\t\t\tlabel: node.id,\n\t\t\t\t\t\t\t\t\t\t\t\tincome: node.income,\n\t\t\t\t\t\t\t\t\t\t\t\tradius: Math.ceil((node.income / 1000) % 10),\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tfill={this.scale(Math.ceil((node.income / 1000) % 10))}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\tsocialdataresponse.links.map((link) => (\n\t\t\t\t\t\t\t\t\t\t<ForceGraphLink\n\t\t\t\t\t\t\t\t\t\t\tkey={link.source + link.target}\n\t\t\t\t\t\t\t\t\t\t\tlink={{\n\t\t\t\t\t\t\t\t\t\t\t\tsource: link.source,\n\t\t\t\t\t\t\t\t\t\t\t\ttarget: link.target,\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: 5,\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tfill=\"blue\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</InteractiveForceGraph>\n\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t<Flex p=\"4\">{value ? <Box value={value}>{value}</Box> : null}</Flex>\n\t\t\t\t\t</Flex>\n\t\t\t\t</Box>\n\t\t\t</>\n\t\t);\n\t}\n}\nexport default SocialNodeGraph;\n"]},"metadata":{},"sourceType":"module"}