{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport { InteractiveForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force'; // import {Hint} from 'react-vis'\n\nimport { ENDPOINT } from '../config';\n\nconst socketIOClient = require('socket.io-client'); // data structure definitions for NodeGraph component\n\n\nclass SocialNodeGraph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_forgetValue\", () => {\n      this.setState({\n        value: null\n      });\n    });\n\n    _defineProperty(this, \"_rememberValue\", value => {\n      this.setState({\n        value\n      });\n      console.log(value);\n    });\n\n    _defineProperty(this, \"scale\", scaleCategory20());\n\n    this.state = {\n      value: null,\n      socialdataresponse: {\n        nodes: [],\n        links: []\n      },\n      endpoint: ENDPOINT\n    };\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state; //Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on('FromSocialNodeData', data => this.setState({\n      socialdataresponse: data\n    }));\n  }\n\n  render() {\n    const {\n      socialdataresponse,\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(InteractiveForceGraph, {\n      animation: \"wobbly\",\n      simulationOptions: {\n        height: 500,\n        width: 1000,\n        alpha: 1,\n        animate: true\n      },\n      labelAttr: \"label\",\n      highlightDependencies: true // onSelectNode={(node) => this.setState({value: \"HellowWorld\"})}\n      // onDeselectNode={this.setState({value: null})}\n      ,\n      children: [socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 6\n      }, this) : socialdataresponse.nodes.map(node => /*#__PURE__*/_jsxDEV(ForceGraphNode, {\n        node: {\n          id: node.id,\n          label: node.id,\n          income: node.income,\n          radius: Math.ceil(node.income / 1000 % 10)\n        },\n        fill: this.scale(Math.ceil(node.income / 1000 % 10))\n      }, node.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this)), socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : socialdataresponse.links.map(link => /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n        link: {\n          source: link.source,\n          target: link.target\n        },\n        fill: \"blue\"\n      }, link.source + link.target, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default SocialNodeGraph;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx"],"names":["Spinner","React","scaleCategory20","InteractiveForceGraph","ForceGraphNode","ForceGraphLink","ENDPOINT","socketIOClient","require","SocialNodeGraph","Component","constructor","props","setState","value","console","log","state","socialdataresponse","nodes","links","endpoint","componentDidMount","socket","on","data","render","height","width","alpha","animate","length","map","node","id","label","income","radius","Math","ceil","scale","link","source","target"],"mappings":"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","sourcesContent":["import { Alert, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport {\n    InteractiveForceGraph,\n\tForceGraphNode,\n    ForceGraphLink,\n    Hint\n} from 'react-vis-force';\n// import {Hint} from 'react-vis'\nimport {ENDPOINT} from '../config'\nconst socketIOClient = require('socket.io-client');\n// data structure definitions for NodeGraph component\ninterface links {\n\tsource: string;\n\ttarget: string;\n}\ninterface nodes {\n    id: string;\n    income: number;\n}\nexport interface nodeGraphDataStruct {\n\tnodes: nodes[];\n    links: links[];\n    \n}\ninterface nodeGraphDataProps {\n    value?: any\n    socialdataresponse: nodeGraphDataStruct\n    endpoint: string\n}\n\nclass SocialNodeGraph extends React.Component<{}, nodeGraphDataProps> {\n    constructor(props) {\n        super(props);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\tsocialdataresponse: { nodes: [], links: [] },\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n    _forgetValue = () => {\n        this.setState({\n            value: null,\n        });\n    }\n    _rememberValue = (value) => {\n        this.setState({value});\n        console.log(value)\n\t};\n\n\n\tscale = scaleCategory20();\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\t\tsocket.on('FromSocialNodeData', (data) =>\n\t\t\tthis.setState({ socialdataresponse: data })\n        );\n\t}\n\trender() {\n\t\tconst { socialdataresponse, value } = this.state;\n\t\treturn (\n\t\t\t<InteractiveForceGraph\n\t\t\t\tanimation=\"wobbly\"\n\t\t\t\tsimulationOptions={{\n\t\t\t\t\theight: 500,\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\talpha: 1,\n\t\t\t\t\tanimate: true,\n\t\t\t\t}}\n\t\t\t\tlabelAttr=\"label\"\n\t\t\t\thighlightDependencies\n\t\t\t\t// onSelectNode={(node) => this.setState({value: \"HellowWorld\"})}\n\t\t\t\t// onDeselectNode={this.setState({value: null})}\n\t\t\t>\n\t\t\t\t{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t<Spinner />\n\t\t\t\t) : (\n\t\t\t\t\tsocialdataresponse.nodes.map((node) => (\n\t\t\t\t\t\t<ForceGraphNode\n\t\t\t\t\t\t\tkey={node.id}\n\t\t\t\t\t\t\tnode={{\n\t\t\t\t\t\t\t\tid: node.id,\n\t\t\t\t\t\t\t\tlabel: node.id,\n\t\t\t\t\t\t\t\tincome: node.income,\n\t\t\t\t\t\t\t\tradius: Math.ceil((node.income / 1000) % 10),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tfill={this.scale(Math.ceil((node.income / 1000) % 10))}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t)}\n                {socialdataresponse.nodes.length == 0 ? (\n                    <></>\n                ) : (\n                        socialdataresponse.links.map((link) => (\n                            <ForceGraphLink\n                                key={link.source + link.target}\n                                link={{source: link.source, target: link.target}}\n                                fill=\"blue\"\n                            />\n                        ))\n                    )}\n\t\t\t</InteractiveForceGraph>\n\t\t);\n\t}\n}\nexport default SocialNodeGraph;\n"]},"metadata":{},"sourceType":"module"}