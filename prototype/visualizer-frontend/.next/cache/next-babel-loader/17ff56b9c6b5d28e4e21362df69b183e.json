{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/pages/index.tsx\";\nimport { Box, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { Hero } from '../components/Hero';\nimport { Container } from '../components/Container';\nimport { Main } from '../components/Main';\nimport { DarkModeSwitch } from '../components/DarkModeSwitch';\nimport { Footer } from '../components/Footer';\nimport BarChart from '../components/BarChart';\nimport SocialNodeGraph from '../components/SocialNodeGraph';\nimport { SOCIALNODEDATA } from '../data';\n\nconst socketIOClient = require('socket.io-client');\n\nconst ENDPOINT = 'http://localhost:3456';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      salesresponse: [],\n      timeresponse: 0,\n      socialdataresponse: '',\n      endpoint: ENDPOINT\n    };\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state; //Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on('FromAPI', data => this.setState({\n      timeresponse: data\n    }));\n    socket.on('FromSalesData', data => this.setState({\n      salesresponse: data\n    }));\n    socket.on('FromSocialNodeData', data => this.setState({\n      socialdataresponse: data\n    }));\n  }\n\n  render() {\n    const {\n      timeresponse,\n      salesresponse,\n      socialdataresponse\n    } = this.state;\n    console.log(JSON.parse(socialdataresponse));\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Hero, {\n        title: \"DEMO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [\"The date is \", timeresponse]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: \"100%\",\n          children: !salesresponse ? /*#__PURE__*/_jsxDEV(BarChart, {\n            data: {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 8\n          }, this) : /*#__PURE__*/_jsxDEV(BarChart, {\n            data: salesresponse\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: !socialdataresponse ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 8\n          }, this) : /*#__PURE__*/_jsxDEV(SocialNodeGraph, {\n            nodeGraphData: SOCIALNODEDATA\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DarkModeSwitch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: \"Fancy Footer Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/pages/index.tsx"],"names":["Box","Spinner","React","Hero","Container","Main","DarkModeSwitch","Footer","BarChart","SocialNodeGraph","SOCIALNODEDATA","socketIOClient","require","ENDPOINT","App","Component","constructor","props","state","salesresponse","timeresponse","socialdataresponse","endpoint","componentDidMount","socket","on","data","setState","render","console","log","JSON","parse"],"mappings":"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","sourcesContent":["import {\n\tBox, Spinner,\n} from '@chakra-ui/react';\nimport React, {  } from 'react';\nimport { Hero } from '../components/Hero';\nimport { Container } from '../components/Container';\nimport { Main } from '../components/Main';\nimport { DarkModeSwitch } from '../components/DarkModeSwitch';\nimport { Footer } from '../components/Footer';\nimport BarChart from '../components/BarChart';\nimport SocialNodeGraph from '../components/SocialNodeGraph';\nimport {SOCIALNODEDATA} from '../data';\nconst socketIOClient = require('socket.io-client');\nconst ENDPOINT = 'http://localhost:3456';\ninterface indexProps {\n    endpoint: string\n    salesresponse: any\n    timeresponse: number\n    socialdataresponse:string\n}\n\nclass App extends React.Component<{},indexProps> {\n\tconstructor(props) {\n        super(props);\n        this.state = {\n            salesresponse: [],\n            timeresponse: 0,\n            socialdataresponse: '',\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n        socket.on('FromAPI', (data) => this.setState({timeresponse: data}));\n        socket.on('FromSalesData', (data) => this.setState({salesresponse: data}))\n        socket.on('FromSocialNodeData', (data) =>\n\t\t\t\t\tthis.setState({ socialdataresponse: data })\n\t\t\t\t);\n\t}\n\n\trender() {\n        const {timeresponse, salesresponse, socialdataresponse} = this.state;\n        console.log(JSON.parse(socialdataresponse))\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Hero title=\"DEMO\" />\n\t\t\t\t<Main>\n\t\t\t\t\t<Box>The date is {timeresponse}</Box>\n\t\t\t\t\t<Box width=\"100%\">\n\t\t\t\t\t\t{!salesresponse ? (\n\t\t\t\t\t\t\t<BarChart data={{}}></BarChart>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<BarChart data={salesresponse}></BarChart>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Box>\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t{!socialdataresponse ? (\n\t\t\t\t\t\t\t<Spinner></Spinner>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<SocialNodeGraph nodeGraphData={SOCIALNODEDATA}></SocialNodeGraph>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Box>\n\t\t\t\t</Main>\n\t\t\t\t<DarkModeSwitch></DarkModeSwitch>\n\t\t\t\t<Footer>Fancy Footer Information</Footer>\n\t\t\t</Container>\n\t\t);\n\t}\n}\nexport default App"]},"metadata":{},"sourceType":"module"}