{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Grid, GridItem, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport { InteractiveForceGraph, ForceGraphNode, ForceGraphLink // Hint as forceHint,\n} from 'react-vis-force';\nimport { ENDPOINT } from '../config';\n\nconst socketIOClient = require('socket.io-client'); // data structure definitions for NodeGraph component\n\n\nclass SocialNodeGraph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_forgetValue\", () => {\n      this.setState({\n        value: null\n      });\n    });\n\n    _defineProperty(this, \"_rememberValue\", value => {\n      this.setState({\n        value\n      });\n    });\n\n    _defineProperty(this, \"scale\", scaleCategory20());\n\n    this.state = {\n      value: null,\n      socialdataresponse: {\n        nodes: [],\n        links: []\n      },\n      endpoint: ENDPOINT\n    };\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state; //Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on('FromSocialNodeData', data => this.setState({\n      socialdataresponse: data\n    }));\n  }\n\n  render() {\n    const {\n      socialdataresponse,\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(GridItem, {\n            rowSpan: 1,\n            colSpan: 4,\n            bg: \"tomato\",\n            children: /*#__PURE__*/_jsxDEV(InteractiveForceGraph, {\n              animation: \"wobbly\",\n              simulationOptions: {\n                height: 500,\n                width: 1000,\n                alpha: 1,\n                animate: true\n              },\n              labelAttr: \"label\",\n              highlightDependencies: true,\n              onSelectNode: node => {\n                this.setState({\n                  value: 'HI'\n                });\n                this.forceUpdate();\n              },\n              onDeselectNode: this._forgetValue,\n              children: [socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 9\n              }, this) : socialdataresponse.nodes.map(node => /*#__PURE__*/_jsxDEV(ForceGraphNode, {\n                node: {\n                  id: node.id,\n                  label: node.id,\n                  income: node.income,\n                  radius: Math.ceil(node.income / 1000 % 10)\n                },\n                fill: this.scale(Math.ceil(node.income / 1000 % 10))\n              }, node.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 10\n              }, this)), socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : socialdataresponse.links.map(link => /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n                link: {\n                  source: link.source,\n                  target: link.target\n                },\n                fill: \"blue\"\n              }, link.source + link.target, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 10\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            colSpan: 1,\n            bg: \"papayawhip\",\n            children: value ? /*#__PURE__*/_jsxDEV(Box, {\n              value: value,\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 16\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 6\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default SocialNodeGraph;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx"],"names":["Box","Grid","GridItem","Spinner","React","scaleCategory20","InteractiveForceGraph","ForceGraphNode","ForceGraphLink","ENDPOINT","socketIOClient","require","SocialNodeGraph","Component","constructor","props","setState","value","state","socialdataresponse","nodes","links","endpoint","componentDidMount","socket","on","data","render","height","width","alpha","animate","node","forceUpdate","_forgetValue","length","map","id","label","income","radius","Math","ceil","scale","link","source","target"],"mappings":"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","sourcesContent":["import { Alert, Box, Grid, GridItem, Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport {\n\tInteractiveForceGraph,\n\tForceGraphNode,\n\tForceGraphLink,\n\t// Hint as forceHint,\n} from 'react-vis-force';\nimport { Hin as visHint } from 'react-vis';\nimport { ENDPOINT } from '../config';\nconst socketIOClient = require('socket.io-client');\n// data structure definitions for NodeGraph component\ninterface links {\n\tsource: string;\n\ttarget: string;\n}\ninterface nodes {\n\tid: string;\n\tincome: number;\n}\nexport interface nodeGraphDataStruct {\n\tnodes: nodes[];\n\tlinks: links[];\n}\ninterface nodeGraphDataProps {\n\tvalue?: any;\n\tsocialdataresponse: nodeGraphDataStruct;\n\tendpoint: string;\n}\n\nclass SocialNodeGraph extends React.Component<{}, nodeGraphDataProps> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\tsocialdataresponse: { nodes: [], links: [] },\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n\t_forgetValue = () => {\n\t\tthis.setState({\n\t\t\tvalue: null,\n\t\t});\n\t};\n\n\t_rememberValue = (value) => {\n\t\tthis.setState({ value });\n\t};\n\n\tscale = scaleCategory20();\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\t\tsocket.on('FromSocialNodeData', (data) =>\n\t\t\tthis.setState({ socialdataresponse: data })\n\t\t);\n\t}\n\trender() {\n\t\tconst { socialdataresponse, value } = this.state;\n\t\treturn (\n\t\t\t<><Box>\n\t\t\t\t<Grid\n\t\t\t\t\t\n\t\t\t\t>\n\t\t\t\t\t<GridItem rowSpan={1} colSpan={4} bg=\"tomato\">\n\t\t\t\t\t\t<InteractiveForceGraph\n\t\t\t\t\t\t\tanimation=\"wobbly\"\n\t\t\t\t\t\t\tsimulationOptions={{\n\t\t\t\t\t\t\t\theight: 500,\n\t\t\t\t\t\t\t\twidth: 1000,\n\t\t\t\t\t\t\t\talpha: 1,\n\t\t\t\t\t\t\t\tanimate: true,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tlabelAttr=\"label\"\n\t\t\t\t\t\t\thighlightDependencies\n\t\t\t\t\t\t\tonSelectNode={(node) => {\n\t\t\t\t\t\t\t\tthis.setState({ value: 'HI' });\n\t\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonDeselectNode={this._forgetValue}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tsocialdataresponse.nodes.map((node) => (\n\t\t\t\t\t\t\t\t\t<ForceGraphNode\n\t\t\t\t\t\t\t\t\t\tkey={node.id}\n\t\t\t\t\t\t\t\t\t\tnode={{\n\t\t\t\t\t\t\t\t\t\t\tid: node.id,\n\t\t\t\t\t\t\t\t\t\t\tlabel: node.id,\n\t\t\t\t\t\t\t\t\t\t\tincome: node.income,\n\t\t\t\t\t\t\t\t\t\t\tradius: Math.ceil((node.income / 1000) % 10),\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tfill={this.scale(Math.ceil((node.income / 1000) % 10))}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tsocialdataresponse.links.map((link) => (\n\t\t\t\t\t\t\t\t\t<ForceGraphLink\n\t\t\t\t\t\t\t\t\t\tkey={link.source + link.target}\n\t\t\t\t\t\t\t\t\t\tlink={{ source: link.source, target: link.target }}\n\t\t\t\t\t\t\t\t\t\tfill=\"blue\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</InteractiveForceGraph>\n\t\t\t\t\t</GridItem>\n\t\t\t\t\t<GridItem colSpan={1} bg=\"papayawhip\">\n\t\t\t\t\t\t{value ? <Box value={value}>{value}</Box> : null}\n\t\t\t\t\t</GridItem>\n                </Grid>\n            </Box>\n\t\t\t</>\n\t\t);\n\t}\n}\nexport default SocialNodeGraph;\n"]},"metadata":{},"sourceType":"module"}