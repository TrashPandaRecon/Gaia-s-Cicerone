{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { ENDPOINT } from './config/config'; // This is a Singleton design pattern. Its a design pattern from object oriented programming that only allows a single instance of a class. \n// It is useful when you want all users of the class to use the same instance to prevent wasting of resources or duplicates, also helps with synchronizing class usage. \n\nvar socketIOClient = require('socket.io-client');\n\nexport var SingletonSocket = /*#__PURE__*/function () {\n  function SingletonSocket() {\n    _classCallCheck(this, SingletonSocket);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    this.socket = socketIOClient(ENDPOINT);\n  }\n\n  _createClass(SingletonSocket, [{\n    key: \"getSocket\",\n    value: function getSocket() {\n      return this.socket;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!SingletonSocket.instance) {\n        SingletonSocket.instance = new SingletonSocket();\n      }\n\n      return SingletonSocket.instance;\n    }\n  }]);\n\n  return SingletonSocket;\n}();\n\n_defineProperty(SingletonSocket, \"instance\", void 0);","map":null,"metadata":{},"sourceType":"module"}