{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/code/src/pages/index.tsx\";\nimport { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport { Container } from '../components/Container';\nimport { Main } from '../components/Main';\n\nconst socketIOClient = require('socket.io-client');\n\nconst ENDPOINT = 'http://localhost:30002';\n\nclass App extends React.Component {\n  constructor() {\n    super({});\n    this.state = {\n      response: 0,\n      endpoint: ENDPOINT\n    };\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state; //Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on('FromAPI', data => this.setState({\n      response: data\n    }));\n  }\n\n  render() {\n    const {\n      response\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Main, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/code/src/pages/index.tsx"],"names":["Box","React","Container","Main","socketIOClient","require","ENDPOINT","App","Component","constructor","state","response","endpoint","componentDidMount","socket","on","data","setState","render"],"mappings":";;AAAA,SAOIA,GAPJ,QAQO,kBARP;AASA,OAAOC,KAAP,MAA2C,OAA3C;AAGA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,IAAT,QAAqB,oBAArB;;AAIA,MAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAMC,QAAQ,GAAG,wBAAjB;;AAOA,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAiD;AAChDC,EAAAA,WAAW,GAAG;AACP,UAAM,EAAN;AACN,SAAKC,KAAL,GAAa;AACZC,MAAAA,QAAQ,EAAE,CADE;AAEZC,MAAAA,QAAQ,EAAEN;AAFE,KAAb;AAIA;;AAEDO,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAED,MAAAA;AAAF,QAAe,KAAKF,KAA1B,CADmB,CAEnB;;AACA,UAAMI,MAAM,GAAGV,cAAc,CAACQ,QAAD,CAA7B,CAHmB,CAInB;;AACAE,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU,KAAKC,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAEK;AAAZ,KAAd,CAA/B;AACA;;AAEDE,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEP,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,wBACU,QAAC,SAAD;AAAA,6BACI,QAAC,IAAD;AAAA,+BACI,QAAC,GAAD;AAAA,oBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADV;AAOA;;AA1B+C;;AA4BjD,eAAeJ,GAAf","sourcesContent":["import {\n\tCode,\n\tList,\n\tListItem,\n\tListIcon,\n\tLink as ChakraLink,\n\tText,\n    Box,\n} from '@chakra-ui/react';\nimport React, { useState, useEffect } from 'react';\nimport { CheckCircleIcon, LinkIcon } from '@chakra-ui/icons';\nimport { Hero } from '../components/Hero';\nimport { Container } from '../components/Container';\nimport { Main } from '../components/Main';\nimport { DarkModeSwitch } from '../components/DarkModeSwitch';\nimport { Footer } from '../components/Footer';\nimport BarChart from '../components/BarChart';\nconst socketIOClient = require('socket.io-client');\nconst ENDPOINT = 'http://localhost:30002';\n\ninterface indexProps {\n    endpoint: string\n    response: number\n}\n\nclass App extends React.Component<{},indexProps> {\n\tconstructor() {\n        super({});\n\t\tthis.state = {\n\t\t\tresponse: 0,\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\t\tsocket.on('FromAPI', (data) => this.setState({ response: data }));\n\t}\n\n\trender() {\n\t\tconst { response } = this.state;\n\t\treturn (\n            <Container>\n                <Main>\n                    <Box>{response}</Box>\n                </Main>\n            </Container>\n\t\t);\n\t}\n}\nexport default App"]},"metadata":{},"sourceType":"module"}