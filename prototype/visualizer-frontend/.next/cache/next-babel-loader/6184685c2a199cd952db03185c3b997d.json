{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/code/src/pages/index.tsx\";\nimport { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport { Hero } from '../components/Hero';\nimport { Container } from '../components/Container';\nimport { Main } from '../components/Main';\nimport { DarkModeSwitch } from '../components/DarkModeSwitch';\nimport { Footer } from '../components/Footer';\nimport BarChart from '../components/BarChart';\n\nconst socketIOClient = require('socket.io-client');\n\nconst ENDPOINT = 'http://localhost:30002';\n\nclass App extends React.Component {\n  constructor() {\n    super({});\n    this.state = {\n      timeresponse: 0,\n      endpoint: ENDPOINT\n    };\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state; //Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on('FromAPI', data => this.setState({\n      timeresponse: data\n    }));\n    socket.on('FromSalesData,');\n  }\n\n  render() {\n    const {\n      timeresponse,\n      salesresponse\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Hero, {\n        title: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [\"This is \", timeresponse]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: salesresponse\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DarkModeSwitch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: \"Fancy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/code/src/pages/index.tsx"],"names":["Box","React","Hero","Container","Main","DarkModeSwitch","Footer","BarChart","socketIOClient","require","ENDPOINT","App","Component","constructor","state","timeresponse","endpoint","componentDidMount","socket","on","data","setState","render","salesresponse"],"mappings":";;AAAA,SAOIA,GAPJ,QAQO,kBARP;AASA,OAAOC,KAAP,MAA2C,OAA3C;AAEA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAMC,QAAQ,GAAG,wBAAjB;;AAOA,MAAMC,GAAN,SAAkBV,KAAK,CAACW,SAAxB,CAAiD;AAChDC,EAAAA,WAAW,GAAG;AACP,UAAM,EAAN;AACN,SAAKC,KAAL,GAAa;AACZC,MAAAA,YAAY,EAAE,CADF;AAEZC,MAAAA,QAAQ,EAAEN;AAFE,KAAb;AAIA;;AAEDO,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAED,MAAAA;AAAF,QAAe,KAAKF,KAA1B,CADmB,CAEnB;;AACA,UAAMI,MAAM,GAAGV,cAAc,CAACQ,QAAD,CAA7B,CAHmB,CAInB;;AACME,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU,KAAKC,QAAL,CAAc;AAACN,MAAAA,YAAY,EAAEK;AAAf,KAAd,CAA/B;AACAF,IAAAA,MAAM,CAACC,EAAP,CAAU,gBAAV;AAEN;;AAEDG,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEP,MAAAA,YAAF;AAAeQ,MAAAA;AAAf,QAAiC,KAAKT,KAA5C;AACA,wBACU,QAAC,SAAD;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD;AAAA,gCACI,QAAC,GAAD;AAAA,iCAAcC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,GAAD;AAAA,iCACI,QAAC,QAAD;AAAU,YAAA,IAAI,EAAEQ;AAAhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAQI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cARJ,eASI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADV;AAaA;;AAlC+C;;AAoCjD,eAAeZ,GAAf","sourcesContent":["import {\n\tCode,\n\tList,\n\tListItem,\n\tListIcon,\n\tLink as ChakraLink,\n\tText,\n    Box,\n} from '@chakra-ui/react';\nimport React, { useState, useEffect } from 'react';\nimport { CheckCircleIcon, LinkIcon } from '@chakra-ui/icons';\nimport { Hero } from '../components/Hero';\nimport { Container } from '../components/Container';\nimport { Main } from '../components/Main';\nimport { DarkModeSwitch } from '../components/DarkModeSwitch';\nimport { Footer } from '../components/Footer';\nimport BarChart from '../components/BarChart';\nimport {SALESDATA} from '../data';\nconst socketIOClient = require('socket.io-client');\nconst ENDPOINT = 'http://localhost:30002';\ninterface indexProps {\n    endpoint: string\n    salesresponse: any\n    timeresponse: number\n}\n\nclass App extends React.Component<{},indexProps> {\n\tconstructor() {\n        super({});\n\t\tthis.state = {\n\t\t\ttimeresponse: 0,\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n        socket.on('FromAPI', (data) => this.setState({timeresponse: data}));\n        socket.on('FromSalesData,')\n        \n\t}\n\n\trender() {\n\t\tconst { timeresponse,salesresponse } = this.state;\n\t\treturn (\n            <Container>\n                <Hero title=\"\"/>\n                <Main>\n                    <Box>This is {timeresponse}</Box>\n                    <Box>\n                        <BarChart data={salesresponse}></BarChart>\n                    </Box>\n                </Main>\n                <DarkModeSwitch></DarkModeSwitch>\n                <Footer>Fancy</Footer>\n            </Container>\n\t\t);\n\t}\n}\nexport default App"]},"metadata":{},"sourceType":"module"}