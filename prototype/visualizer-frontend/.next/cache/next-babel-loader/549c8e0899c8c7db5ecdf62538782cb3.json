{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx\";\nimport { Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport { ForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force'; // data structure definitions for NodeGraph component\n\nfunction SocialNodeGraph(_ref) {\n  var _this = this;\n\n  var nodeGraphData = _ref.nodeGraphData;\n  var scale = scaleCategory20();\n  return /*#__PURE__*/_jsxDEV(ForceGraph, {\n    zoom: true,\n    zoomOptions: {\n      minScale: 0.25,\n      maxScale: 5\n    },\n    animation: \"wobbly\",\n    simulationOptions: {\n      height: 500,\n      width: 1000,\n      alpha: 1,\n      animate: true\n    },\n    labelAttr: \"income\",\n    onSelectNode: function onSelectNode(node) {\n      return console.log(node.id);\n    },\n    highlightDependencies: true,\n    children: [nodeGraphData.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 6\n    }, this) : nodeGraphData.nodes.map(function (node) {\n      return /*#__PURE__*/_jsxDEV(ForceGraphNode, {\n        node: {\n          id: node.id,\n          label: node.id,\n          income: node.income,\n          radius: Math.ceil(node.income / 1000 % 10)\n        },\n        fill: scale(Math.ceil(node.income / 1000 % 10))\n      }, node.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, _this);\n    }), nodeGraphData.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : nodeGraphData.links.map(function (link) {\n      return /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n        link: {\n          source: link.source,\n          target: link.target\n        },\n        fill: \"blue\"\n      }, link.source + link.target, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 4\n  }, this);\n}\n\n_c = SocialNodeGraph;\nexport default SocialNodeGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocialNodeGraph\");","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx"],"names":["Spinner","React","scaleCategory20","ForceGraph","ForceGraphNode","ForceGraphLink","SocialNodeGraph","nodeGraphData","scale","minScale","maxScale","height","width","alpha","animate","node","console","log","id","nodes","length","map","label","income","radius","Math","ceil","links","link","source","target"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAEIC,UAFJ,EAGCC,cAHD,EAICC,cAJD,QAKO,iBALP,C,CAMA;;AAcA,SAASC,eAAT,OAIO;AAAA;;AAAA,MAHNC,aAGM,QAHNA,aAGM;AACH,MAAMC,KAAK,GAAGN,eAAe,EAA7B;AACA,sBACD,QAAC,UAAD;AACC,IAAA,IAAI,MADL;AAEC,IAAA,WAAW,EAAE;AACZO,MAAAA,QAAQ,EAAE,IADE;AAEZC,MAAAA,QAAQ,EAAE;AAFE,KAFd;AAOC,IAAA,SAAS,EAAC,QAPX;AAQC,IAAA,iBAAiB,EAAE;AAClBC,MAAAA,MAAM,EAAE,GADU;AAElBC,MAAAA,KAAK,EAAE,IAFW;AAGlBC,MAAAA,KAAK,EAAE,CAHW;AAIlBC,MAAAA,OAAO,EAAE;AAJS,KARpB;AAcC,IAAA,SAAS,EAAC,QAdX;AAeC,IAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,aAAUC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,EAAjB,CAAV;AAAA,KAff;AAgBC,IAAA,qBAAqB,MAhBtB;AAAA,eAkBEX,aAAa,CAACY,KAAd,CAAoBC,MAApB,IAA8B,CAA9B,gBACA,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADA,GAGAb,aAAa,CAACY,KAAd,CAAoBE,GAApB,CAAwB,UAACN,IAAD;AAAA,0BACvB,QAAC,cAAD;AAEC,QAAA,IAAI,EAAE;AACLG,UAAAA,EAAE,EAAEH,IAAI,CAACG,EADJ;AAELI,UAAAA,KAAK,EAAEP,IAAI,CAACG,EAFP;AAGLK,UAAAA,MAAM,EAAER,IAAI,CAACQ,MAHR;AAILC,UAAAA,MAAM,EAAEC,IAAI,CAACC,IAAL,CAAWX,IAAI,CAACQ,MAAL,GAAc,IAAf,GAAuB,EAAjC;AAJH,SAFP;AAQC,QAAA,IAAI,EAAEf,KAAK,CAACiB,IAAI,CAACC,IAAL,CAAWX,IAAI,CAACQ,MAAL,GAAc,IAAf,GAAuB,EAAjC,CAAD;AARZ,SACMR,IAAI,CAACG,EADX;AAAA;AAAA;AAAA;AAAA,eADuB;AAAA,KAAxB,CArBF,EAkCEX,aAAa,CAACY,KAAd,CAAoBC,MAApB,IAA8B,CAA9B,gBACA,qCADA,GAGAb,aAAa,CAACoB,KAAd,CAAoBN,GAApB,CAAwB,UAACO,IAAD;AAAA,0BACvB,QAAC,cAAD;AAEC,QAAA,IAAI,EAAE;AAAEC,UAAAA,MAAM,EAAED,IAAI,CAACC,MAAf;AAAuBC,UAAAA,MAAM,EAAEF,IAAI,CAACE;AAApC,SAFP;AAGC,QAAA,IAAI,EAAC;AAHN,SACMF,IAAI,CAACC,MAAL,GAAcD,IAAI,CAACE,MADzB;AAAA;AAAA;AAAA;AAAA,eADuB;AAAA,KAAxB,CArCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADC;AAgDH;;KAtDQxB,e;AAuDT,eAAeA,eAAf","sourcesContent":["import { Spinner } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport {\n    InteractiveForceGraph,\n    ForceGraph,\n\tForceGraphNode,\n\tForceGraphLink,\n} from 'react-vis-force';\n// data structure definitions for NodeGraph component\ninterface links {\n\tsource: string;\n\ttarget: string;\n}\ninterface nodes {\n    id: string;\n    income: number;\n}\ninterface nodeGraphDataStruct {\n\tnodes: nodes[];\n\tlinks: links[];\n}\n\nfunction SocialNodeGraph({\n\tnodeGraphData,\n}: {\n\tnodeGraphData: nodeGraphDataStruct;\n    }) {\n    const scale = scaleCategory20();\n    return (\n\t\t\t<ForceGraph\n\t\t\t\tzoom\n\t\t\t\tzoomOptions={{\n\t\t\t\t\tminScale: 0.25,\n\t\t\t\t\tmaxScale: 5,\n\t\t\t\t\t\n\t\t\t\t}}\n\t\t\t\tanimation=\"wobbly\"\n\t\t\t\tsimulationOptions={{\n\t\t\t\t\theight: 500,\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\talpha: 1,\n\t\t\t\t\tanimate: true,\n\t\t\t\t}}\n\t\t\t\tlabelAttr=\"income\"\n\t\t\t\tonSelectNode={(node) => console.log(node.id)}\n\t\t\t\thighlightDependencies\n\t\t\t>\n\t\t\t\t{nodeGraphData.nodes.length == 0 ? (\n\t\t\t\t\t<Spinner />\n\t\t\t\t) : (\n\t\t\t\t\tnodeGraphData.nodes.map((node) => (\n\t\t\t\t\t\t<ForceGraphNode\n\t\t\t\t\t\t\tkey={node.id}\n\t\t\t\t\t\t\tnode={{\n\t\t\t\t\t\t\t\tid: node.id,\n\t\t\t\t\t\t\t\tlabel: node.id,\n\t\t\t\t\t\t\t\tincome: node.income,\n\t\t\t\t\t\t\t\tradius: Math.ceil((node.income / 1000) % 10),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tfill={scale(Math.ceil((node.income / 1000) % 10))}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t)}\n\t\t\t\t{nodeGraphData.nodes.length == 0 ? (\n\t\t\t\t\t<></>\n\t\t\t\t) : (\n\t\t\t\t\tnodeGraphData.links.map((link) => (\n\t\t\t\t\t\t<ForceGraphLink\n\t\t\t\t\t\t\tkey={link.source + link.target}\n\t\t\t\t\t\t\tlink={{ source: link.source, target: link.target }}\n\t\t\t\t\t\t\tfill=\"blue\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t)}\n\t\t\t</ForceGraph>\n\t\t);\n}\nexport default SocialNodeGraph;\n"]},"metadata":{},"sourceType":"module"}