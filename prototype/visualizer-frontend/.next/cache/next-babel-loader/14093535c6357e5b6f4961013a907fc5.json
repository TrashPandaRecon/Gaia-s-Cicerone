{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/code/src/pages/index.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport { Container } from '../components/Container';\nimport { Main } from '../components/Main';\n\nvar socketIOClient = require('socket.io-client');\n\nvar ENDPOINT = 'http://localhost:30002';\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, {});\n    _this.state = {\n      response: 0,\n      endpoint: ENDPOINT\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var endpoint = this.state.endpoint; //Very simply connect to the socket\n\n      var socket = socketIOClient(endpoint); //Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n      socket.on('FromAPI', function (data) {\n        return _this2.setState({\n          response: data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var response = this.state.response;\n      return /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Main, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            children: [\"This is \", response]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/code/src/pages/index.tsx"],"names":["Box","React","Container","Main","socketIOClient","require","ENDPOINT","App","state","response","endpoint","socket","on","data","setState","Component"],"mappings":";;;;;;;;;;;;AAAA,SAOIA,GAPJ,QAQO,kBARP;AASA,OAAOC,KAAP,MAA2C,OAA3C;AAGA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,IAAT,QAAqB,oBAArB;;AAIA,IAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAMC,QAAQ,GAAG,wBAAjB;;IAOMC,G;;;;;AACL,iBAAc;AAAA;;AAAA;;AACP,8BAAM,EAAN;AACN,UAAKC,KAAL,GAAa;AACZC,MAAAA,QAAQ,EAAE,CADE;AAEZC,MAAAA,QAAQ,EAAEJ;AAFE,KAAb;AAFa;AAMb;;;;wCAEmB;AAAA;;AAAA,UACXI,QADW,GACE,KAAKF,KADP,CACXE,QADW,EAEnB;;AACA,UAAMC,MAAM,GAAGP,cAAc,CAACM,QAAD,CAA7B,CAHmB,CAInB;;AACAC,MAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,UAACC,IAAD;AAAA,eAAU,MAAI,CAACC,QAAL,CAAc;AAAEL,UAAAA,QAAQ,EAAEI;AAAZ,SAAd,CAAV;AAAA,OAArB;AACA;;;6BAEQ;AAAA,UACAJ,QADA,GACa,KAAKD,KADlB,CACAC,QADA;AAER,0BACU,QAAC,SAAD;AAAA,+BACI,QAAC,IAAD;AAAA,iCACI,QAAC,GAAD;AAAA,mCAAcA,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADV;AAOA;;;;EA1BgBR,KAAK,CAACc,S;;AA4BxB,eAAeR,GAAf","sourcesContent":["import {\n\tCode,\n\tList,\n\tListItem,\n\tListIcon,\n\tLink as ChakraLink,\n\tText,\n    Box,\n} from '@chakra-ui/react';\nimport React, { useState, useEffect } from 'react';\nimport { CheckCircleIcon, LinkIcon } from '@chakra-ui/icons';\nimport { Hero } from '../components/Hero';\nimport { Container } from '../components/Container';\nimport { Main } from '../components/Main';\nimport { DarkModeSwitch } from '../components/DarkModeSwitch';\nimport { Footer } from '../components/Footer';\nimport BarChart from '../components/BarChart';\nconst socketIOClient = require('socket.io-client');\nconst ENDPOINT = 'http://localhost:30002';\n\ninterface indexProps {\n    endpoint: string\n    response: number\n}\n\nclass App extends React.Component<{},indexProps> {\n\tconstructor() {\n        super({});\n\t\tthis.state = {\n\t\t\tresponse: 0,\n\t\t\tendpoint: ENDPOINT,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { endpoint } = this.state;\n\t\t//Very simply connect to the socket\n\t\tconst socket = socketIOClient(endpoint);\n\t\t//Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\t\tsocket.on('FromAPI', (data) => this.setState({ response: data }));\n\t}\n\n\trender() {\n\t\tconst { response } = this.state;\n\t\treturn (\n            <Container>\n                <Main>\n                    <Box>This is {response}</Box>\n                </Main>\n            </Container>\n\t\t);\n\t}\n}\nexport default App"]},"metadata":{},"sourceType":"module"}