{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/LineChart.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, Crosshair } from 'react-vis';\nimport * as d3 from 'd3';\nimport { Skeleton } from '@chakra-ui/react';\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_clickHandler\", item => {\n      const {\n        items\n      } = this.state;\n      item.disabled = !item.disabled;\n      this.setState({\n        items\n      });\n    });\n\n    _defineProperty(this, \"_searchChangeHandler\", searchText => {\n      this.setState({\n        searchText\n      });\n    });\n\n    var itemArray = [];\n\n    for (let i = 0; i < this.props.dataPipe.length; i++) {\n      itemArray.push({\n        item: this.props.dataPipe[i]\n      });\n    }\n\n    this.state = {\n      graphdataStorage: [],\n      dataPipe: this.props.dataPipe,\n      socketConnection: SingletonSocket.getInstance().getSocket(),\n      items: itemArray\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dataPipe,\n      socketConnection,\n      graphdataStorage\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.on(dataPipe[i], data => {\n        graphdataStorage.splice(i, 1, {\n          graphData: data,\n          Label: dataPipe[i]\n        });\n        this.setState({\n          graphdataStorage: graphdataStorage\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      dataPipe,\n      socketConnection\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.off(dataPipe[i], data => {});\n    }\n  }\n\n  render() {\n    const {\n      graphdataStorage,\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: graphdataStorage.length == 0 ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        height: \"500px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(XYPlot, {\n          onMouseLeave: () => this.setState({\n            value: false\n          }),\n          xType: \"time\",\n          width: 750,\n          height: 500,\n          animation: true,\n          margin: {\n            bottom: 80,\n            left: 50,\n            right: 10,\n            top: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            tickLabelAngle: -45,\n            tickTotal: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            tickFormat: tick => d3.format('.2s')(tick)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 7\n          }, this), graphdataStorage.map(graphdata => /*#__PURE__*/_jsxDEV(LineSeries, {\n            curve: 'curveMonotoneX',\n            className: graphdata.Label,\n            data: graphdata.graphData,\n            opacity: 1,\n            strokeStyle: \"solid\",\n            style: {},\n            onNearestX: d => this.setState({\n              value: d\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 8\n          }, this)), value && /*#__PURE__*/_jsxDEV(Crosshair, {\n            values: [value]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(SearchableDiscreteColorLegend, {\n          height: 200,\n          width: 300,\n          onSearchChange: this._searchChangeHandler,\n          searchText: searchText,\n          onItemClick: this._clickHandler,\n          items: items\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/LineChart.tsx"],"names":["React","SingletonSocket","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineSeries","Crosshair","d3","Skeleton","BarChart","Component","constructor","props","item","items","state","disabled","setState","searchText","itemArray","i","dataPipe","length","push","graphdataStorage","socketConnection","getInstance","getSocket","componentDidMount","on","data","splice","graphData","Label","componentWillUnmount","off","render","value","bottom","left","right","top","tick","format","map","graphdata","d","_searchChangeHandler","_clickHandler"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport {\n\tXYPlot,\n\tXAxis,\n\tYAxis,\n\tVerticalGridLines,\n\tHorizontalGridLines,\n\tVerticalBarSeries,\n\tVerticalBarSeriesCanvas,\n\tLabelSeries,\n    LineSeries,\n    Crosshair\n} from 'react-vis';\nimport * as d3 from 'd3';\nimport { Skeleton, Spinner } from '@chakra-ui/react';\nimport { dataPipes } from '../config/dataPipeEnum';\nimport {delay} from '../Util/delay';\ninterface XYResponseStruct {\n\tx: string;\n\ty: number;\n}\ninterface XYResponseGraphData {\n    graphData: XYResponseStruct[]\n    Label: string\n}\ninterface XYDataProps {\n\tgraphdataStorage: XYResponseGraphData[];\n\tdataPipe: string[];\n    socketConnection: any;\n    value?: any\n    items?: any\n    searchText?:any \n}\n\nclass BarChart extends React.Component<\n\t{ dataPipe: string[] },\n\tXYDataProps\n> {\n\tconstructor(props) {\n        super(props);\n        var itemArray = []\n        for (let i = 0; i < this.props.dataPipe.length; i++){\n            itemArray.push({item: this.props.dataPipe[i]})\n        }\n\t\tthis.state = {\n\t\t\tgraphdataStorage: [],\n\t\t\tdataPipe: this.props.dataPipe,\n            socketConnection: SingletonSocket.getInstance().getSocket(),\n            items: itemArray\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { dataPipe, socketConnection, graphdataStorage } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.on(dataPipe[i], (data) => {\n                graphdataStorage.splice(i, 1, {graphData: data, Label: dataPipe[i]});\n\t\t\t\tthis.setState({ graphdataStorage: graphdataStorage });\n\t\t\t});\n\t\t}\n\t}\n\tcomponentWillUnmount() {\n\t\tconst { dataPipe, socketConnection } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.off(dataPipe[i], (data) => {});\n\t\t}\n\t}\n\t_clickHandler = (item) => {\n\t\tconst { items } = this.state;\n\t\titem.disabled = !item.disabled;\n\t\tthis.setState({ items });\n\t};\n\n\t_searchChangeHandler = (searchText) => {\n\t\tthis.setState({ searchText });\n\t};\n\trender() {\n\t\tconst { graphdataStorage, value } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{graphdataStorage.length == 0 ? (\n\t\t\t\t\t<Skeleton height=\"500px\"></Skeleton>\n                ) : (\n                        <>\n\t\t\t\t\t<XYPlot\n\t\t\t\t\t\tonMouseLeave={() => this.setState({ value: false })}\n\t\t\t\t\t\txType=\"time\"\n\t\t\t\t\t\twidth={750}\n\t\t\t\t\t\theight={500}\n\t\t\t\t\t\tanimation={true}\n\t\t\t\t\t\tmargin={{ bottom: 80, left: 50, right: 10, top: 20 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<VerticalGridLines />\n\t\t\t\t\t\t<HorizontalGridLines />\n\t\t\t\t\t\t<XAxis tickLabelAngle={-45} tickTotal={10} />\n\t\t\t\t\t\t<YAxis tickFormat={(tick) => d3.format('.2s')(tick)} />\n\n\t\t\t\t\t\t{graphdataStorage.map((graphdata) => (\n\t\t\t\t\t\t\t<LineSeries\n\t\t\t\t\t\t\t\tcurve={'curveMonotoneX'}\n\t\t\t\t\t\t\t\tclassName={graphdata.Label}\n\t\t\t\t\t\t\t\tdata={graphdata.graphData}\n\t\t\t\t\t\t\t\topacity={1}\n\t\t\t\t\t\t\t\tstrokeStyle=\"solid\"\n\t\t\t\t\t\t\t\tstyle={{}}\n\t\t\t\t\t\t\t\tonNearestX={(d) => this.setState({ value: d })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t{value && <Crosshair values={[value]} />}\n                        </XYPlot>\n                        <SearchableDiscreteColorLegend\n        height={200}\n        width={300}\n        onSearchChange={this._searchChangeHandler}\n        searchText={searchText}\n        onItemClick={this._clickHandler}\n        items={items}\n      /></>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}