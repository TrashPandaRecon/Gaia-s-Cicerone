{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/TimeSeriesLineChart.tsx\";\nimport React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, DiscreteColorLegend } from 'react-vis';\nimport * as d3 from 'd3';\nimport { Flex, Grid, GridItem, Skeleton } from '@chakra-ui/react';\n\nclass TimeSeriesLineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    var itemArray = [];\n    var datastore = [];\n\n    for (let i = 0; i < this.props.dataPipe.length; i++) {\n      itemArray.push({\n        title: this.props.dataPipe[i].split(' ')[0]\n      });\n      datastore.push({\n        graphData: [{\n          x: \"0\",\n          y: 0\n        }],\n        Label: this.dataPipe[i]\n      });\n    }\n\n    this.state = {\n      graphdataStorage: [],\n      dataPipe: this.props.dataPipe,\n      socketConnection: SingletonSocket.getInstance().getSocket(),\n      items: itemArray,\n      value: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dataPipe,\n      socketConnection,\n      graphdataStorage\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.on(dataPipe[i], data => {\n        graphdataStorage.splice(i, 1, {\n          graphData: data,\n          Label: dataPipe[i]\n        });\n        this.setState({\n          graphdataStorage: graphdataStorage\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      dataPipe,\n      socketConnection\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.off(dataPipe[i], data => {});\n    }\n  }\n\n  render() {\n    const {\n      graphdataStorage,\n      value,\n      items\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      children: graphdataStorage.length == 0 ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        height: this.props.height.toString() + \"px\",\n        width: this.props.width.toString() + \"px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          h: this.props.height,\n          templateColumns: \"repeat(8, 1fr)\",\n          gap: 1,\n          children: [/*#__PURE__*/_jsxDEV(GridItem, {\n            colSpan: 7,\n            children: /*#__PURE__*/_jsxDEV(XYPlot, {\n              onMouseLeave: () => this.setState({\n                value: null\n              }),\n              xType: \"time\",\n              width: this.props.width / 5 * 4 // 80% of total width\n              ,\n              height: this.props.height,\n              animation: true,\n              margin: {\n                bottom: 80,\n                left: 50,\n                right: 10,\n                top: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                tickLabelAngle: -45,\n                tickTotal: 10\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                title: this.props.yLabel,\n                tickFormat: tick => d3.format('.2s')(tick)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 10\n              }, this), graphdataStorage.map(graphdata => /*#__PURE__*/_jsxDEV(LineSeries, {\n                curve: 'curveMonotoneX' //className={graphdata.Label}\n                ,\n                data: graphdata.graphData,\n                opacity: 1,\n                strokeStyle: \"solid\",\n                style: {}\n              }, graphdata.Label, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 11\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            colSpan: 1,\n            children: /*#__PURE__*/_jsxDEV(DiscreteColorLegend, {\n              orientation: \"vertical\",\n              height: this.props.height,\n              width: this.props.width / 5 // 20% of width taken as input from parent\n              ,\n              items: items\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default TimeSeriesLineChart;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/TimeSeriesLineChart.tsx"],"names":["React","SingletonSocket","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineSeries","DiscreteColorLegend","d3","Flex","Grid","GridItem","Skeleton","TimeSeriesLineChart","Component","constructor","props","itemArray","datastore","i","dataPipe","length","push","title","split","graphData","x","y","Label","state","graphdataStorage","socketConnection","getInstance","getSocket","items","value","componentDidMount","on","data","splice","setState","componentWillUnmount","off","render","height","toString","width","bottom","left","right","top","yLabel","tick","format","map","graphdata"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport {\n\tXYPlot,\n\tXAxis,\n\tYAxis,\n\tVerticalGridLines,\n\tHorizontalGridLines,\n\tLineSeries,\n\tDiscreteColorLegend,\n} from 'react-vis';\nimport * as d3 from 'd3';\nimport { Box, Flex, Grid, GridItem, Skeleton } from '@chakra-ui/react';\n\n\ninterface XYResponseStruct {\n\tx: string;\n\ty: number;\n}\ninterface XYResponseGraphData {\n\tgraphData: XYResponseStruct[];\n\tLabel: string;\n}\ninterface XYDataProps {\n\tgraphdataStorage: XYResponseGraphData[];\n\tdataPipe: string[];\n\tsocketConnection: any;\n\tvalue?: any;\n    items?: any;\n}\n\nclass TimeSeriesLineChart extends React.Component<{ dataPipe: string[], height:number,width:number,yLabel:string }, XYDataProps> {\n\tconstructor(props) {\n\t\tsuper(props);\n        var itemArray = [];\n        var datastore = [];\n\t\tfor (let i = 0; i < this.props.dataPipe.length; i++) {\n            itemArray.push({title: this.props.dataPipe[i].split(' ')[0]});\n            datastore.push({graphData: [{x: \"0\", y: 0}], Label: this.dataPipe[i] })\n        }\n        \n\t\tthis.state = {\n\t\t\tgraphdataStorage: [],\n\t\t\tdataPipe: this.props.dataPipe,\n\t\t\tsocketConnection: SingletonSocket.getInstance().getSocket(),\n\t\t\titems: itemArray,\n            value: null,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { dataPipe, socketConnection, graphdataStorage } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.on(dataPipe[i], (data) => {\n\t\t\t\tgraphdataStorage.splice(i, 1, { graphData: data, Label: dataPipe[i] });\n\t\t\t\tthis.setState({ graphdataStorage: graphdataStorage });\n\t\t\t});\n\t\t}\n\t}\n\tcomponentWillUnmount() {\n\t\tconst { dataPipe, socketConnection } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.off(dataPipe[i], (data) => {});\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { graphdataStorage, value, items, } = this.state;\n\t\treturn (\n\t\t\t<Flex>\n\t\t\t\t{graphdataStorage.length == 0 ? (\n\t\t\t\t\t<Skeleton height={this.props.height.toString() + \"px\"} width={this.props.width.toString() + \"px\"}></Skeleton>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\th={this.props.height}\n\t\t\t\t\t\t\ttemplateColumns=\"repeat(8, 1fr)\"\n\t\t\t\t\t\t\tgap={1}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<GridItem colSpan={7}>\n\t\t\t\t\t\t\t\t<XYPlot\n\t\t\t\t\t\t\t\t\tonMouseLeave={() => this.setState({ value: null })}\n\t\t\t\t\t\t\t\t\txType=\"time\"\n\t\t\t\t\t\t\t\t\twidth={this.props.width/5*4} // 80% of total width\n\t\t\t\t\t\t\t\t\theight={this.props.height}\n\t\t\t\t\t\t\t\t\tanimation={true}\n\t\t\t\t\t\t\t\t\tmargin={{ bottom: 80, left: 50, right: 10, top: 20 }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VerticalGridLines />\n\t\t\t\t\t\t\t\t\t<HorizontalGridLines />\n\t\t\t\t\t\t\t\t\t<XAxis tickLabelAngle={-45} tickTotal={10} />\n\t\t\t\t\t\t\t\t\t<YAxis\n\t\t\t\t\t\t\t\t\t\ttitle={this.props.yLabel}\n\t\t\t\t\t\t\t\t\t\ttickFormat={(tick) => d3.format('.2s')(tick)}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t{graphdataStorage.map((graphdata) => (\n\t\t\t\t\t\t\t\t\t\t<LineSeries\n\t\t\t\t\t\t\t\t\t\t\tcurve={'curveMonotoneX'}\n\t\t\t\t\t\t\t\t\t\t\t//className={graphdata.Label}\n\t\t\t\t\t\t\t\t\t\t\tkey={graphdata.Label}\n\t\t\t\t\t\t\t\t\t\t\tdata={graphdata.graphData}\n\t\t\t\t\t\t\t\t\t\t\topacity={1}\n\t\t\t\t\t\t\t\t\t\t\tstrokeStyle=\"solid\"\n\t\t\t\t\t\t\t\t\t\t\tstyle={{}}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</XYPlot>\n\t\t\t\t\t\t\t</GridItem>\n\t\t\t\t\t\t\t<GridItem colSpan={1}>\n\t\t\t\t\t\t\t\t<DiscreteColorLegend\n                                        orientation=\"vertical\"\n                                        height={this.props.height}\n                                        width={this.props.width / 5} // 20% of width taken as input from parent\n                                        items={items}\n                                        \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</GridItem>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Flex>\n\t\t);\n\t}\n}\n\nexport default TimeSeriesLineChart;\n"]},"metadata":{},"sourceType":"module"}