{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/TimeSeriesLineMarkChart.tsx\";\nimport React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineMarkSeries, DiscreteColorLegend, Hint } from 'react-vis';\nimport * as d3 from 'd3';\nimport { Box, Flex, Grid, GridItem, Skeleton } from '@chakra-ui/react';\n\nclass TimeSeriesLineMarkChart extends React.Component {\n  constructor(props) {\n    super(props);\n    var itemArray = [];\n\n    for (let i = 0; i < this.props.dataPipe.length; i++) {\n      itemArray.push({\n        title: this.props.dataPipe[i].split(' ')[0]\n      });\n    }\n\n    var dataStorage = [];\n\n    for (let i = 0; i < this.props.dataPipe.length; i++) {\n      SingletonSocket.getInstance().getSocket().on(this.props.dataPipe[i], data => {\n        dataStorage.push({\n          graphData: data,\n          Label: this.props.dataPipe[i]\n        });\n      });\n    }\n\n    this.state = {\n      graphdataStorage: data,\n      dataPipe: this.props.dataPipe,\n      socketConnection: SingletonSocket.getInstance().getSocket(),\n      items: itemArray,\n      value: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dataPipe,\n      socketConnection,\n      graphdataStorage\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.on(dataPipe[i], data => {\n        graphdataStorage.splice(i, 1, {\n          graphData: data,\n          Label: dataPipe[i]\n        });\n        this.setState({\n          graphdataStorage: graphdataStorage\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      dataPipe,\n      socketConnection\n    } = this.state;\n\n    for (let i = 0; i < dataPipe.length; i++) {\n      socketConnection.off(dataPipe[i], data => {});\n    }\n  }\n\n  render() {\n    const {\n      graphdataStorage,\n      value,\n      items\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      p: \"1\",\n      children: graphdataStorage.length == 0 ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        height: this.props.height.toString() + \"px\",\n        width: this.props.width.toString() + \"px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          h: this.props.height,\n          templateColumns: \"repeat(8, 1fr)\",\n          gap: 4,\n          children: [/*#__PURE__*/_jsxDEV(GridItem, {\n            colSpan: 7,\n            children: /*#__PURE__*/_jsxDEV(XYPlot, {\n              onMouseLeave: () => this.setState({\n                value: null\n              }),\n              xType: \"time\",\n              width: this.props.width / 5 * 4 // 80% of total width\n              ,\n              height: this.props.height,\n              animation: true,\n              margin: {\n                bottom: 80,\n                left: 50,\n                right: 10,\n                top: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                tickLabelAngle: -45,\n                tickTotal: 10\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                title: this.props.yLabel,\n                tickFormat: tick => d3.format('.2s')(tick)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 10\n              }, this), graphdataStorage.map(graphdata => /*#__PURE__*/_jsxDEV(LineMarkSeries, {\n                curve: 'curveMonotoneX' //className={graphdata.Label}\n                ,\n                data: graphdata.graphData,\n                opacity: 1,\n                strokeStyle: \"solid\",\n                style: {},\n                onValueMouseOver: d => {\n                  this.setState({\n                    value: d\n                  });\n                }\n              }, graphdata.Label, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 11\n              }, this)), value && /*#__PURE__*/_jsxDEV(Hint, {\n                value: value,\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  maxW: \"sm\",\n                  borderWidth: \"1px\",\n                  borderRadius: \"lg\",\n                  overflow: \"hidden\",\n                  p: \"1\",\n                  bg: \"steelblue\",\n                  color: \"white\",\n                  fontSize: \"sm\",\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    children: [\"Visitors: \", d3.format('.2s')(value.y)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 13\n                  }, this), /*#__PURE__*/_jsxDEV(Box, {\n                    children: [\"Date: \", new Date(value.x).toLocaleDateString()]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 13\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 12\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            colSpan: 1,\n            children: /*#__PURE__*/_jsxDEV(DiscreteColorLegend, {\n              orientation: \"vertical\",\n              height: this.props.height,\n              width: this.props.width / 5 // 20% of width taken as input from parent\n              ,\n              items: items,\n              padding: 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default TimeSeriesLineMarkChart;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/TimeSeriesLineMarkChart.tsx"],"names":["React","SingletonSocket","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineMarkSeries","DiscreteColorLegend","Hint","d3","Box","Flex","Grid","GridItem","Skeleton","TimeSeriesLineMarkChart","Component","constructor","props","itemArray","i","dataPipe","length","push","title","split","dataStorage","getInstance","getSocket","on","data","graphData","Label","state","graphdataStorage","socketConnection","items","value","componentDidMount","splice","setState","componentWillUnmount","off","render","height","toString","width","bottom","left","right","top","yLabel","tick","format","map","graphdata","d","y","Date","x","toLocaleDateString"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SACCC,MADD,EAECC,KAFD,EAGCC,KAHD,EAICC,iBAJD,EAKCC,mBALD,EASCC,cATD,EAWCC,mBAXD,EAYCC,IAZD,QAaO,WAbP;AAcA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,QAApC,QAA6D,kBAA7D;;AAmBA,MAAMC,uBAAN,SAAsChB,KAAK,CAACiB,SAA5C,CAAqI;AACpIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,KAAL,CAAWG,QAAX,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACpDD,MAAAA,SAAS,CAACI,IAAV,CAAe;AAAEC,QAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWG,QAAX,CAAoBD,CAApB,EAAuBK,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC;AAAT,OAAf;AACM;;AACD,QAAIC,WAAW,GAAG,EAAlB;;AACJ,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,KAAL,CAAWG,QAAX,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACpDpB,MAAAA,eAAe,CAAC2B,WAAhB,GACEC,SADF,GAEEC,EAFF,CAEK,KAAKX,KAAL,CAAWG,QAAX,CAAoBD,CAApB,CAFL,EAE8BU,IAAD,IAAU;AACrCJ,QAAAA,WAAW,CAACH,IAAZ,CAAiB;AAChBQ,UAAAA,SAAS,EAAED,IADK;AAEhBE,UAAAA,KAAK,EAAE,KAAKd,KAAL,CAAWG,QAAX,CAAoBD,CAApB;AAFS,SAAjB;AAIA,OAPF;AAQA;;AACH,SAAKa,KAAL,GAAa;AACZC,MAAAA,gBAAgB,EAAEJ,IADN;AAEZT,MAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QAFT;AAGZc,MAAAA,gBAAgB,EAAEnC,eAAe,CAAC2B,WAAhB,GAA8BC,SAA9B,EAHN;AAIZQ,MAAAA,KAAK,EAAEjB,SAJK;AAKHkB,MAAAA,KAAK,EAAE;AALJ,KAAb;AAOA;;AAEDC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEjB,MAAAA,QAAF;AAAYc,MAAAA,gBAAZ;AAA8BD,MAAAA;AAA9B,QAAmD,KAAKD,KAA9D;;AACA,SAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,QAAQ,CAACC,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACzCe,MAAAA,gBAAgB,CAACN,EAAjB,CAAoBR,QAAQ,CAACD,CAAD,CAA5B,EAAkCU,IAAD,IAAU;AAC1CI,QAAAA,gBAAgB,CAACK,MAAjB,CAAwBnB,CAAxB,EAA2B,CAA3B,EAA8B;AAAEW,UAAAA,SAAS,EAAED,IAAb;AAAmBE,UAAAA,KAAK,EAAEX,QAAQ,CAACD,CAAD;AAAlC,SAA9B;AACA,aAAKoB,QAAL,CAAc;AAAEN,UAAAA,gBAAgB,EAAEA;AAApB,SAAd;AACA,OAHD;AAIA;AACD;;AACDO,EAAAA,oBAAoB,GAAG;AACtB,UAAM;AAAEpB,MAAAA,QAAF;AAAYc,MAAAA;AAAZ,QAAiC,KAAKF,KAA5C;;AACA,SAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,QAAQ,CAACC,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACzCe,MAAAA,gBAAgB,CAACO,GAAjB,CAAqBrB,QAAQ,CAACD,CAAD,CAA7B,EAAmCU,IAAD,IAAU,CAAE,CAA9C;AACA;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACR,UAAM;AAAET,MAAAA,gBAAF;AAAoBG,MAAAA,KAApB;AAA2BD,MAAAA;AAA3B,QAAsC,KAAKH,KAAjD;AACA,wBACC,QAAC,IAAD;AAAM,MAAA,CAAC,EAAC,GAAR;AAAA,gBACEC,gBAAgB,CAACZ,MAAjB,IAA2B,CAA3B,gBACA,QAAC,QAAD;AAAU,QAAA,MAAM,EAAE,KAAKJ,KAAL,CAAW0B,MAAX,CAAkBC,QAAlB,KAA+B,IAAjD;AAAuD,QAAA,KAAK,EAAE,KAAK3B,KAAL,CAAW4B,KAAX,CAAiBD,QAAjB,KAA8B;AAA5F;AAAA;AAAA;AAAA;AAAA,cADA,gBAGA;AAAA,+BACC,QAAC,IAAD;AACC,UAAA,CAAC,EAAE,KAAK3B,KAAL,CAAW0B,MADf;AAEC,UAAA,eAAe,EAAC,gBAFjB;AAGC,UAAA,GAAG,EAAE,CAHN;AAAA,kCAKC,QAAC,QAAD;AAAU,YAAA,OAAO,EAAE,CAAnB;AAAA,mCACC,QAAC,MAAD;AACC,cAAA,YAAY,EAAE,MAAM,KAAKJ,QAAL,CAAc;AAAEH,gBAAAA,KAAK,EAAE;AAAT,eAAd,CADrB;AAEC,cAAA,KAAK,EAAC,MAFP;AAGC,cAAA,KAAK,EAAE,KAAKnB,KAAL,CAAW4B,KAAX,GAAiB,CAAjB,GAAmB,CAH3B,CAG8B;AAH9B;AAIC,cAAA,MAAM,EAAE,KAAK5B,KAAL,CAAW0B,MAJpB;AAKC,cAAA,SAAS,EAAE,IALZ;AAMC,cAAA,MAAM,EAAE;AAAEG,gBAAAA,MAAM,EAAE,EAAV;AAAcC,gBAAAA,IAAI,EAAE,EAApB;AAAwBC,gBAAAA,KAAK,EAAE,EAA/B;AAAmCC,gBAAAA,GAAG,EAAE;AAAxC,eANT;AAAA,sCAQC,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,sBARD,eASC,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,sBATD,eAUC,QAAC,KAAD;AAAO,gBAAA,cAAc,EAAE,CAAC,EAAxB;AAA4B,gBAAA,SAAS,EAAE;AAAvC;AAAA;AAAA;AAAA;AAAA,sBAVD,eAWC,QAAC,KAAD;AACC,gBAAA,KAAK,EAAE,KAAKhC,KAAL,CAAWiC,MADnB;AAEC,gBAAA,UAAU,EAAGC,IAAD,IAAU3C,EAAE,CAAC4C,MAAH,CAAU,KAAV,EAAiBD,IAAjB;AAFvB;AAAA;AAAA;AAAA;AAAA,sBAXD,EAgBElB,gBAAgB,CAACoB,GAAjB,CAAsBC,SAAD,iBACrB,QAAC,cAAD;AACC,gBAAA,KAAK,EAAE,gBADR,CAEC;AAFD;AAIC,gBAAA,IAAI,EAAEA,SAAS,CAACxB,SAJjB;AAKC,gBAAA,OAAO,EAAE,CALV;AAMC,gBAAA,WAAW,EAAC,OANb;AAOC,gBAAA,KAAK,EAAE,EAPR;AAQC,gBAAA,gBAAgB,EAAGyB,CAAD,IAAO;AACxB,uBAAKhB,QAAL,CAAc;AAAEH,oBAAAA,KAAK,EAAEmB;AAAT,mBAAd;AACA;AAVF,iBAGMD,SAAS,CAACvB,KAHhB;AAAA;AAAA;AAAA;AAAA,sBADA,CAhBF,EA8BEK,KAAK,iBACL,QAAC,IAAD;AAAM,gBAAA,KAAK,EAAEA,KAAb;AAAA,uCACC,QAAC,GAAD;AACC,kBAAA,IAAI,EAAC,IADN;AAEC,kBAAA,WAAW,EAAC,KAFb;AAGC,kBAAA,YAAY,EAAC,IAHd;AAIC,kBAAA,QAAQ,EAAC,QAJV;AAKC,kBAAA,CAAC,EAAC,GALH;AAMC,kBAAA,EAAE,EAAC,WANJ;AAOyC,kBAAA,KAAK,EAAC,OAP/C;AAQqC,kBAAA,QAAQ,EAAC,IAR9C;AAAA,0CAUC,QAAC,GAAD;AAAA,6CAAgB5B,EAAE,CAAC4C,MAAH,CAAU,KAAV,EAAiBhB,KAAK,CAACoB,CAAvB,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAVD,eAWC,QAAC,GAAD;AAAA,yCACQ,IAAIC,IAAJ,CAASrB,KAAK,CAACsB,CAAf,EAAkBC,kBAAlB,EADR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,sBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBALD,eAyDC,QAAC,QAAD;AAAU,YAAA,OAAO,EAAE,CAAnB;AAAA,mCACC,QAAC,mBAAD;AACgC,cAAA,WAAW,EAAC,UAD5C;AAEgC,cAAA,MAAM,EAAE,KAAK1C,KAAL,CAAW0B,MAFnD;AAGgC,cAAA,KAAK,EAAE,KAAK1B,KAAL,CAAW4B,KAAX,GAAmB,CAH1D,CAG6D;AAH7D;AAIgC,cAAA,KAAK,EAAEV,KAJvC;AAKgC,cAAA,OAAO,EAAE;AALzC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBAzDD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAJF;AAAA;AAAA;AAAA;AAAA,YADD;AA6EA;;AA1HmI;;AA6HrI,eAAerB,uBAAf","sourcesContent":["import React from 'react';\nimport 'react-vis/dist/style.css';\nimport { SingletonSocket } from '../SingletonSocket';\nimport {\n\tXYPlot,\n\tXAxis,\n\tYAxis,\n\tVerticalGridLines,\n\tHorizontalGridLines,\n\tVerticalBarSeries,\n\tVerticalBarSeriesCanvas,\n\tLabelSeries,\n\tLineMarkSeries,\n\tCrosshair,\n\tDiscreteColorLegend,\n\tHint,\n} from 'react-vis';\nimport * as d3 from 'd3';\nimport { Box, Flex, Grid, GridItem, Skeleton, Spinner } from '@chakra-ui/react';\nimport { dataPipes } from '../config/dataPipeEnum';\nimport { delay } from '../Util/delay';\ninterface XYResponseStruct {\n\tx: string;\n\ty: number;\n}\ninterface XYResponseGraphData {\n\tgraphData: XYResponseStruct[];\n\tLabel: string;\n}\ninterface XYDataProps {\n\tgraphdataStorage: XYResponseGraphData[];\n\tdataPipe: string[];\n\tsocketConnection: any;\n\tvalue?: any;\n    items?: any;\n}\n\nclass TimeSeriesLineMarkChart extends React.Component<{ dataPipe: string[], height:number,width:number,yLabel:string }, XYDataProps> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tvar itemArray = [];\n\t\tfor (let i = 0; i < this.props.dataPipe.length; i++) {\n\t\t\titemArray.push({ title: this.props.dataPipe[i].split(' ')[0] });\n        }\n        var dataStorage = [];\n\t\t\t\tfor (let i = 0; i < this.props.dataPipe.length; i++) {\n\t\t\t\t\tSingletonSocket.getInstance()\n\t\t\t\t\t\t.getSocket()\n\t\t\t\t\t\t.on(this.props.dataPipe[i], (data) => {\n\t\t\t\t\t\t\tdataStorage.push({\n\t\t\t\t\t\t\t\tgraphData: data,\n\t\t\t\t\t\t\t\tLabel: this.props.dataPipe[i],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\tthis.state = {\n\t\t\tgraphdataStorage: data,\n\t\t\tdataPipe: this.props.dataPipe,\n\t\t\tsocketConnection: SingletonSocket.getInstance().getSocket(),\n\t\t\titems: itemArray,\n            value: null,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { dataPipe, socketConnection, graphdataStorage } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.on(dataPipe[i], (data) => {\n\t\t\t\tgraphdataStorage.splice(i, 1, { graphData: data, Label: dataPipe[i] });\n\t\t\t\tthis.setState({ graphdataStorage: graphdataStorage });\n\t\t\t});\n\t\t}\n\t}\n\tcomponentWillUnmount() {\n\t\tconst { dataPipe, socketConnection } = this.state;\n\t\tfor (let i = 0; i < dataPipe.length; i++) {\n\t\t\tsocketConnection.off(dataPipe[i], (data) => {});\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { graphdataStorage, value, items, } = this.state;\n\t\treturn (\n\t\t\t<Flex p=\"1\">\n\t\t\t\t{graphdataStorage.length == 0 ? (\n\t\t\t\t\t<Skeleton height={this.props.height.toString() + \"px\"} width={this.props.width.toString() + \"px\"}></Skeleton>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\th={this.props.height}\n\t\t\t\t\t\t\ttemplateColumns=\"repeat(8, 1fr)\"\n\t\t\t\t\t\t\tgap={4}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<GridItem colSpan={7}>\n\t\t\t\t\t\t\t\t<XYPlot\n\t\t\t\t\t\t\t\t\tonMouseLeave={() => this.setState({ value: null })}\n\t\t\t\t\t\t\t\t\txType=\"time\"\n\t\t\t\t\t\t\t\t\twidth={this.props.width/5*4} // 80% of total width\n\t\t\t\t\t\t\t\t\theight={this.props.height}\n\t\t\t\t\t\t\t\t\tanimation={true}\n\t\t\t\t\t\t\t\t\tmargin={{ bottom: 80, left: 50, right: 10, top: 20 }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<VerticalGridLines />\n\t\t\t\t\t\t\t\t\t<HorizontalGridLines />\n\t\t\t\t\t\t\t\t\t<XAxis tickLabelAngle={-45} tickTotal={10} />\n\t\t\t\t\t\t\t\t\t<YAxis\n\t\t\t\t\t\t\t\t\t\ttitle={this.props.yLabel}\n\t\t\t\t\t\t\t\t\t\ttickFormat={(tick) => d3.format('.2s')(tick)}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t{graphdataStorage.map((graphdata) => (\n\t\t\t\t\t\t\t\t\t\t<LineMarkSeries\n\t\t\t\t\t\t\t\t\t\t\tcurve={'curveMonotoneX'}\n\t\t\t\t\t\t\t\t\t\t\t//className={graphdata.Label}\n\t\t\t\t\t\t\t\t\t\t\tkey={graphdata.Label}\n\t\t\t\t\t\t\t\t\t\t\tdata={graphdata.graphData}\n\t\t\t\t\t\t\t\t\t\t\topacity={1}\n\t\t\t\t\t\t\t\t\t\t\tstrokeStyle=\"solid\"\n\t\t\t\t\t\t\t\t\t\t\tstyle={{}}\n\t\t\t\t\t\t\t\t\t\t\tonValueMouseOver={(d) => {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({ value: d });\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t{value && (\n\t\t\t\t\t\t\t\t\t\t<Hint value={value}>\n\t\t\t\t\t\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\t\t\t\t\t\tmaxW=\"sm\"\n\t\t\t\t\t\t\t\t\t\t\t\tborderWidth=\"1px\"\n\t\t\t\t\t\t\t\t\t\t\t\tborderRadius=\"lg\"\n\t\t\t\t\t\t\t\t\t\t\t\toverflow=\"hidden\"\n\t\t\t\t\t\t\t\t\t\t\t\tp=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\tbg=\"steelblue\"\n                                                    color=\"white\"\n                                                fontSize=\"sm\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Box>Visitors: {d3.format('.2s')(value.y)}</Box>\n\t\t\t\t\t\t\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t\t\t\t\t\t\tDate: {new Date(value.x).toLocaleDateString()}\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t\t</Hint>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</XYPlot>\n\t\t\t\t\t\t\t</GridItem>\n\t\t\t\t\t\t\t<GridItem colSpan={1}>\n\t\t\t\t\t\t\t\t<DiscreteColorLegend\n                                        orientation=\"vertical\"\n                                        height={this.props.height}\n                                        width={this.props.width / 5} // 20% of width taken as input from parent\n                                        items={items}\n                                        padding={1}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</GridItem>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Flex>\n\t\t);\n\t}\n}\n\nexport default TimeSeriesLineMarkChart;\n"]},"metadata":{},"sourceType":"module"}