{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Flex, Skeleton } from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport { InteractiveForceGraph, ForceGraphNode, ForceGraphLink } from 'react-vis-force';\nimport { SingletonSocket } from '../SingletonSocket';\n\nconst socketIOClient = require('socket.io-client'); // data structure definitions for NodeGraph component\n\n\nclass SocialNodeGraph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"scale\", scaleCategory20());\n\n    this.state = {\n      socialdataresponse: {\n        nodes: [],\n        links: []\n      },\n      dataPipe: this.props.dataPipe,\n      socketConnection: SingletonSocket.getInstance().getSocket()\n    };\n  }\n\n  componentDidMount() {\n    const {\n      socketConnection,\n      dataPipe\n    } = this.state;\n    socketConnection.on(dataPipe, data => this.setState({\n      socialdataresponse: data\n    }));\n  }\n\n  render() {\n    const {\n      socialdataresponse\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: socialdataresponse.nodes.length == 0 ? /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 8\n      }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n        p: \"4\",\n        children: /*#__PURE__*/_jsxDEV(InteractiveForceGraph, {\n          animation: \"wobbly\",\n          simulationOptions: {\n            height: 500,\n            width: 1000,\n            alpha: 1,\n            animate: true\n          },\n          labelAttr: \"label\",\n          highlightDependencies: true,\n          children: [\"socialdataresponse.nodes.map((node) => (\", /*#__PURE__*/_jsxDEV(ForceGraphNode, {\n            node: {\n              id: node.id,\n              label: JSON.stringify(node),\n              radius: Math.ceil(node.income / 1000 % 10)\n            },\n            fill: this.scale(Math.ceil(node.income / 1000 % 10))\n          }, node.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 9\n          }, this), \")) socialdataresponse.links.map((link) => (\", /*#__PURE__*/_jsxDEV(ForceGraphLink, {\n            link: {\n              source: link.source,\n              target: link.target,\n              value: 5 // this value is just to fix a bug in the library that prevents the node graph from being centered in the frame.\n\n            },\n            fill: \"blue\"\n          }, link.source + link.target, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 9\n          }, this), \"))\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default SocialNodeGraph;","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/components/SocialNodeGraph.tsx"],"names":["Flex","Skeleton","React","scaleCategory20","InteractiveForceGraph","ForceGraphNode","ForceGraphLink","SingletonSocket","socketIOClient","require","SocialNodeGraph","Component","constructor","props","state","socialdataresponse","nodes","links","dataPipe","socketConnection","getInstance","getSocket","componentDidMount","on","data","setState","render","length","height","width","alpha","animate","id","node","label","JSON","stringify","radius","Math","ceil","income","scale","source","link","target","value"],"mappings":";;;;;;AAAA,SAASA,IAAT,EAAeC,QAAf,QAA8B,kBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SACCC,qBADD,EAECC,cAFD,EAGCC,cAHD,QAIO,iBAJP;AAKA,SAAQC,eAAR,QAA8B,oBAA9B;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B,C,CACA;;;AAmBA,MAAMC,eAAN,SAA8BR,KAAK,CAACS,SAApC,CAAqF;AACpFC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,mCASXV,eAAe,EATJ;;AAElB,SAAKW,KAAL,GAAa;AACZC,MAAAA,kBAAkB,EAAE;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE;AAApB,OADR;AAEHC,MAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK,QAFlB;AAGHC,MAAAA,gBAAgB,EAAEZ,eAAe,CAACa,WAAhB,GAA8BC,SAA9B;AAHf,KAAb;AAKA;;AAGDC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEH,MAAAA,gBAAF;AAAmBD,MAAAA;AAAnB,QAAgC,KAAKJ,KAA3C;AACAK,IAAAA,gBAAgB,CAACI,EAAjB,CAAoBL,QAApB,EAA+BM,IAAD,IAC7B,KAAKC,QAAL,CAAc;AAAEV,MAAAA,kBAAkB,EAAES;AAAtB,KAAd,CADD;AAGA;;AACDE,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEX,MAAAA;AAAF,QAAyB,KAAKD,KAApC;AACA,wBACC;AAAA,gBAAGC,kBAAkB,CAACC,KAAnB,CAAyBW,MAAzB,IAAmC,CAAnC,gBACC,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADD,gBAGF,QAAC,IAAD;AAAM,QAAA,CAAC,EAAC,GAAR;AAAA,+BACC,QAAC,qBAAD;AACC,UAAA,SAAS,EAAC,QADX;AAEC,UAAA,iBAAiB,EAAE;AAClBC,YAAAA,MAAM,EAAE,GADU;AAElBC,YAAAA,KAAK,EAAE,IAFW;AAGlBC,YAAAA,KAAK,EAAE,CAHW;AAIGC,YAAAA,OAAO,EAAE;AAJZ,WAFpB;AAQC,UAAA,SAAS,EAAC,OARX;AASC,UAAA,qBAAqB,MATtB;AAAA,8EAaG,QAAC,cAAD;AAEC,YAAA,IAAI,EAAE;AACLC,cAAAA,EAAE,EAAEC,IAAI,CAACD,EADJ;AAELE,cAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAFF;AAGLI,cAAAA,MAAM,EAAEC,IAAI,CAACC,IAAL,CAAWN,IAAI,CAACO,MAAL,GAAc,IAAf,GAAuB,EAAjC;AAHH,aAFP;AAOC,YAAA,IAAI,EAAE,KAAKC,KAAL,CAAWH,IAAI,CAACC,IAAL,CAAWN,IAAI,CAACO,MAAL,GAAc,IAAf,GAAuB,EAAjC,CAAX;AAPP,aACMP,IAAI,CAACD,EADX;AAAA;AAAA;AAAA;AAAA,kBAbH,8DAyBG,QAAC,cAAD;AAEC,YAAA,IAAI,EAAE;AACLU,cAAAA,MAAM,EAAEC,IAAI,CAACD,MADR;AAELE,cAAAA,MAAM,EAAED,IAAI,CAACC,MAFR;AAGLC,cAAAA,KAAK,EAAE,CAHF,CAGK;;AAHL,aAFP;AAOC,YAAA,IAAI,EAAC;AAPN,aACMF,IAAI,CAACD,MAAL,GAAcC,IAAI,CAACC,MADzB;AAAA;AAAA;AAAA;AAAA,kBAzBH;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAHD,qBADD;AA6CA;;AAhEmF;;AAkErF,eAAelC,eAAf","sourcesContent":["import { Flex, Skeleton} from '@chakra-ui/react';\nimport React from 'react';\nimport { scaleCategory20 } from 'd3-scale';\nimport {\n\tInteractiveForceGraph,\n\tForceGraphNode,\n\tForceGraphLink,\n} from 'react-vis-force';\nimport {SingletonSocket} from '../SingletonSocket';\nconst socketIOClient = require('socket.io-client');\n// data structure definitions for NodeGraph component\ninterface links {\n\tsource: string;\n\ttarget: string;\n}\ninterface nodes {\n\tid: string;\n\tincome: number;\n}\nexport interface nodeGraphDataStruct {\n\tnodes: nodes[];\n\tlinks: links[];\n}\ninterface nodeGraphDataProps {\n\tsocialdataresponse: nodeGraphDataStruct;\n    socketConnection: any;\n    dataPipe: string;\n}\n\nclass SocialNodeGraph extends React.Component<{dataPipe:string}, nodeGraphDataProps> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsocialdataresponse: { nodes: [], links: [] },\n            dataPipe: this.props.dataPipe,\n            socketConnection: SingletonSocket.getInstance().getSocket()\n\t\t};\n\t}\n\t\n\tscale = scaleCategory20();\n\tcomponentDidMount() {\n\t\tconst { socketConnection,dataPipe } = this.state;\n\t\tsocketConnection.on(dataPipe, (data) =>\n\t\t\tthis.setState({ socialdataresponse: data })\n\t\t);\n\t}\n\trender() {\n\t\tconst { socialdataresponse } = this.state;\n\t\treturn (\n\t\t\t<>{socialdataresponse.nodes.length == 0 ? (\n\t\t\t\t\t\t\t<Skeleton></Skeleton>\n\t\t\t\t\t\t) : (\n\t\t\t\t<Flex p=\"4\">\n\t\t\t\t\t<InteractiveForceGraph\n\t\t\t\t\t\tanimation=\"wobbly\"\n\t\t\t\t\t\tsimulationOptions={{\n\t\t\t\t\t\t\theight: 500,\n\t\t\t\t\t\t\twidth: 1000,\n\t\t\t\t\t\t\talpha: 1,\n                            animate: true,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tlabelAttr=\"label\"\n\t\t\t\t\t\thighlightDependencies\n\t\t\t\t\t>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tsocialdataresponse.nodes.map((node) => (\n\t\t\t\t\t\t\t\t<ForceGraphNode\n\t\t\t\t\t\t\t\t\tkey={node.id}\n\t\t\t\t\t\t\t\t\tnode={{\n\t\t\t\t\t\t\t\t\t\tid: node.id,\n\t\t\t\t\t\t\t\t\t\tlabel: JSON.stringify(node),\n\t\t\t\t\t\t\t\t\t\tradius: Math.ceil((node.income / 1000) % 10),\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tfill={this.scale(Math.ceil((node.income / 1000) % 10))}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tsocialdataresponse.links.map((link) => (\n\t\t\t\t\t\t\t\t<ForceGraphLink\n\t\t\t\t\t\t\t\t\tkey={link.source + link.target}\n\t\t\t\t\t\t\t\t\tlink={{\n\t\t\t\t\t\t\t\t\t\tsource: link.source,\n\t\t\t\t\t\t\t\t\t\ttarget: link.target,\n\t\t\t\t\t\t\t\t\t\tvalue: 5, // this value is just to fix a bug in the library that prevents the node graph from being centered in the frame.\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tfill=\"blue\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\n\t\t\t\t\t</InteractiveForceGraph>\n\t\t\t\t</Flex>)}\n\t\t\t</>\n\t\t);\n\t}\n}\nexport default SocialNodeGraph;\n"]},"metadata":{},"sourceType":"module"}