{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ENDPOINT } from './config/config'; // This is a Singleton design pattern. Its a design pattern from object oriented programming that only allows a single instance of a class. \n// It is useful when you want all users of the class to use the same instance to prevent wasting of resources or duplicates, also helps with synchronizing class usage. \n\nconst socketIOClient = require('socket.io-client');\n\nexport class SingletonSocket {\n  constructor() {\n    _defineProperty(this, \"socket\", void 0);\n\n    this.socket = socketIOClient(ENDPOINT);\n  }\n\n  static getInstance() {\n    if (!SingletonSocket.instance) {\n      SingletonSocket.instance = new SingletonSocket();\n    }\n\n    return SingletonSocket.instance;\n  }\n\n  getSocket() {\n    return this.socket;\n  }\n\n}\n\n_defineProperty(SingletonSocket, \"instance\", void 0);","map":null,"metadata":{},"sourceType":"module"}