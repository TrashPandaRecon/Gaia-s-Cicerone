{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ENDPOINT } from './config/config'; // This is a Singleton design pattern. Its a design pattern from object oriented programming that only allows a single instance of a class. \n// It is useful when you want all users of the class to use the same instance to prevent wasting of resources or duplicates, also helps with synchronizing . \n\nconst socketIOClient = require('socket.io-client');\n\nexport class SingletonSocket {\n  constructor() {\n    _defineProperty(this, \"socket\", void 0);\n\n    this.socket = socketIOClient(ENDPOINT);\n  }\n\n  static getInstance() {\n    if (!SingletonSocket.instance) {\n      SingletonSocket.instance = new SingletonSocket();\n    }\n\n    return SingletonSocket.instance;\n  }\n\n  getSocket() {\n    return this.socket;\n  }\n\n}\n\n_defineProperty(SingletonSocket, \"instance\", void 0);","map":{"version":3,"sources":["/Users/will/Desktop/dev/SDE/prototype/visualizer-frontend/src/SingletonSocket.ts"],"names":["ENDPOINT","socketIOClient","require","SingletonSocket","constructor","socket","getInstance","instance","getSocket"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,iBAAzB,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,OAAO,MAAMC,eAAN,CAAsB;AAGpBC,EAAAA,WAAR,GAAsB;AAAA;;AACrB,SAAKC,MAAL,GAAcJ,cAAc,CAACD,QAAD,CAA5B;AACA;;AACD,SAAcM,WAAd,GAA4B;AAC3B,QAAI,CAACH,eAAe,CAACI,QAArB,EAA+B;AAC9BJ,MAAAA,eAAe,CAACI,QAAhB,GAA2B,IAAIJ,eAAJ,EAA3B;AACA;;AACD,WAAOA,eAAe,CAACI,QAAvB;AACA;;AACMC,EAAAA,SAAP,GAAmB;AAClB,WAAO,KAAKH,MAAZ;AACA;;AAd2B;;gBAAhBF,e","sourcesContent":["import { ENDPOINT } from './config/config';\n\n// This is a Singleton design pattern. Its a design pattern from object oriented programming that only allows a single instance of a class. \n// It is useful when you want all users of the class to use the same instance to prevent wasting of resources or duplicates, also helps with synchronizing . \nconst socketIOClient = require('socket.io-client');\nexport class SingletonSocket {\n\tprivate static instance: SingletonSocket;\n\tprivate socket: any;\n\tprivate constructor() {\n\t\tthis.socket = socketIOClient(ENDPOINT);\n\t}\n\tpublic static getInstance() {\n\t\tif (!SingletonSocket.instance) {\n\t\t\tSingletonSocket.instance = new SingletonSocket();\n\t\t}\n\t\treturn SingletonSocket.instance;\n\t}\n\tpublic getSocket() {\n\t\treturn this.socket;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}